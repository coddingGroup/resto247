[{"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Manager\\SearchFilterIn.js":"1","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\ActionCreators.js":"2","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\configureStore.js":"3","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\MainComponent.js":"4","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\outOfStockProducts.js":"5","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\homepagecomponents\\Search.js":"6","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\index.js":"7","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\MenuComponent.js":"8","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\ContactComponent.js":"9","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Login.js":"10","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\HomeComponent.js":"11","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\products.js":"12","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\comments.js":"13","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\FooterComponent.js":"14","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\recommanded.js":"15","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Navigation.js":"16","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\AboutComponent.js":"17","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\DishdetailComponent.js":"18","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\Forms.js":"19","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Receptions\\WiterHome.js":"20","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\ActionTypes.js":"21","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\LoadingComponent.js":"22","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\HeaderComponent.js":"23","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\shared\\baseUrl.js":"24","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\shared\\dishes.js":"25","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\shared\\ProductsCategories.js":"26","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\homepagecomponents\\HotDeal.js":"27","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\homepagecomponents\\FistScreen.js":"28","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Manager\\FlippingCard.js":"29","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\shared\\hotDealData.js":"30","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\shared\\carouselHome.js":"31","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Manager\\SearchOutputDisplay.js":"32","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\Users.js":"33","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\hotdeals.js":"34","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\homepagecomponents\\RenderCard.js":"35","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Receptions\\UIcomponents\\HotDeal.js":"36","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Manager\\UIcomponents\\ReactDatePicker.js":"37","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Manager\\UIcomponents\\ItemsSold.js":"38","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Receptions\\UIcomponents\\ReactInfiniteScroll.js":"39","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\reportWebVitals.js":"40","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\homepagecomponents\\RenderCard2.js":"41","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Receptions\\UIcomponents\\FilterMenu.js":"42","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Receptions\\UIcomponents\\CicleMenu.js":"43","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Receptions\\UIcomponents\\ScrollView.js":"44","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\SignUp.js":"45","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\cartComponent\\AddedCart.js":"46","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\cartComponent\\TableAddedCarts.js":"47","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\Cart.js":"48","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Receptions\\UIcomponents\\TabsMenu.js":"49","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\homepagecomponents\\RenderCard3.js":"50","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Receptions\\UIcomponents\\PaginationComponent.js":"51","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Manager\\Main.js":"52","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Manager\\UIcomponents\\SideNavigation.js":"53","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\homepagecomponents\\GoogleMap.js":"54","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Receptions\\AllProducts.js":"55","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Receptions\\WaiterCategoryButton.js":"56","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Receptions\\UIcomponents\\ComponentToPrint.js":"57","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Manager\\Products\\HorizontalOutOfStock.js":"58","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Manager\\Products\\IncreaseProduct.js":"59","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Manager\\Products\\StockManagement.js":"60","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Manager\\Products\\MarchProductToResources.js":"61","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Manager\\marching\\MarchProductsCard.js":"62","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Manager\\ModalTogglerButton.js":"63","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Manager\\Reports\\Dashboard.js":"64","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\resources.js":"65","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Receptions\\UIcomponents\\ToggleButton.js":"66","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Manager\\Reports\\DairyUsage.js":"67","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\firebase\\config.js":"68","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\auth.js":"69","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\App.js":"70","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\firebase\\firebase.js":"71","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\collections\\userCollection.js":"72","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\behaviors.js":"73","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\collections\\waiters.js":"74","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\collections\\invoices.js":"75","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Manager\\Reports\\ProductSold.js":"76","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\functions\\getSoldProductDate.js":"77","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\others\\dailyInvoices.js":"78","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\ActionCreator2.js":"79","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\functions\\setImage.js":"80","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Manager\\Reports\\DailyInvoicesComponent.js":"81","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\others\\dailyInvoiceDetails.js":"82","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\others\\dailyStockUp.js":"83","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Manager\\Reports\\DailyStockUp.js":"84","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Manager\\Reports\\DailyMiscellaneousComponent.js":"85","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Manager\\Reports\\DailyResourcesReportsComponent.js":"86","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\functions\\makeInvoicePaid.js":"87","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Receptions\\UIcomponents\\NonPaidInvoicesComponent.js":"88","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\others\\dailyMiscellaneous.js":"89","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Manager\\UIcomponents\\DairyEarning.js":"90","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\others\\otherDailyReports.js":"91","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\collections\\miscellaneous.js":"92","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\others\\dailyResourcesReports.js":"93"},{"size":3602,"mtime":1619671625354,"results":"94","hashOfConfig":"95"},{"size":43632,"mtime":1619682781671,"results":"96","hashOfConfig":"95"},{"size":2640,"mtime":1619747561700,"results":"97","hashOfConfig":"95"},{"size":17880,"mtime":1619755597749,"results":"98","hashOfConfig":"95"},{"size":727,"mtime":1619276634829,"results":"99","hashOfConfig":"95"},{"size":1385,"mtime":1619276634635,"results":"100","hashOfConfig":"95"},{"size":724,"mtime":1619276634746,"results":"101","hashOfConfig":"95"},{"size":2151,"mtime":1619781596310,"results":"102","hashOfConfig":"95"},{"size":11226,"mtime":1619674746614,"results":"103","hashOfConfig":"95"},{"size":5461,"mtime":1619667330593,"results":"104","hashOfConfig":"95"},{"size":7311,"mtime":1619765039447,"results":"105","hashOfConfig":"95"},{"size":813,"mtime":1619667329665,"results":"106","hashOfConfig":"95"},{"size":642,"mtime":1619276634819,"results":"107","hashOfConfig":"95"},{"size":2987,"mtime":1619667329699,"results":"108","hashOfConfig":"95"},{"size":657,"mtime":1619276634836,"results":"109","hashOfConfig":"95"},{"size":9405,"mtime":1619770035321,"results":"110","hashOfConfig":"95"},{"size":5466,"mtime":1619667758399,"results":"111","hashOfConfig":"95"},{"size":8394,"mtime":1619667329186,"results":"112","hashOfConfig":"95"},{"size":935,"mtime":1619667329636,"results":"113","hashOfConfig":"95"},{"size":898,"mtime":1619717135243,"results":"114","hashOfConfig":"95"},{"size":7054,"mtime":1619755597771,"results":"115","hashOfConfig":"95"},{"size":259,"mtime":1619276634132,"results":"116","hashOfConfig":"95"},{"size":4928,"mtime":1619667331642,"results":"117","hashOfConfig":"95"},{"size":50,"mtime":1619276634858,"results":"118","hashOfConfig":"95"},{"size":7174,"mtime":1619276634872,"results":"119","hashOfConfig":"95"},{"size":314,"mtime":1619276634851,"results":"120","hashOfConfig":"95"},{"size":2517,"mtime":1617705627985,"results":"121","hashOfConfig":"95"},{"size":2486,"mtime":1619779827807,"results":"122","hashOfConfig":"95"},{"size":10489,"mtime":1619773605547,"results":"123","hashOfConfig":"95"},{"size":1260,"mtime":1619276634877,"results":"124","hashOfConfig":"95"},{"size":874,"mtime":1619777841541,"results":"125","hashOfConfig":"95"},{"size":440,"mtime":1619276634329,"results":"126","hashOfConfig":"95"},{"size":788,"mtime":1618562140316,"results":"127","hashOfConfig":"95"},{"size":631,"mtime":1619276634825,"results":"128","hashOfConfig":"95"},{"size":1181,"mtime":1619667332341,"results":"129","hashOfConfig":"95"},{"size":3165,"mtime":1619276634492,"results":"130","hashOfConfig":"95"},{"size":2309,"mtime":1619697052716,"results":"131","hashOfConfig":"95"},{"size":1272,"mtime":1619750364192,"results":"132","hashOfConfig":"95"},{"size":1985,"mtime":1619675117962,"results":"133","hashOfConfig":"95"},{"size":415,"mtime":1619276634844,"results":"134","hashOfConfig":"95"},{"size":2420,"mtime":1618214464796,"results":"135","hashOfConfig":"95"},{"size":555,"mtime":1619667330860,"results":"136","hashOfConfig":"95"},{"size":32535,"mtime":1619673312479,"results":"137","hashOfConfig":"95"},{"size":1311,"mtime":1619276634540,"results":"138","hashOfConfig":"95"},{"size":11918,"mtime":1619667329228,"results":"139","hashOfConfig":"95"},{"size":426,"mtime":1619276634571,"results":"140","hashOfConfig":"95"},{"size":8792,"mtime":1619709432971,"results":"141","hashOfConfig":"95"},{"size":1495,"mtime":1619673312309,"results":"142","hashOfConfig":"95"},{"size":8805,"mtime":1619720633636,"results":"143","hashOfConfig":"95"},{"size":3778,"mtime":1619775745625,"results":"144","hashOfConfig":"95"},{"size":1750,"mtime":1619276634508,"results":"145","hashOfConfig":"95"},{"size":4466,"mtime":1619755597614,"results":"146","hashOfConfig":"95"},{"size":4323,"mtime":1619773519501,"results":"147","hashOfConfig":"95"},{"size":1162,"mtime":1619276634589,"results":"148","hashOfConfig":"95"},{"size":2949,"mtime":1619276634405,"results":"149","hashOfConfig":"95"},{"size":595,"mtime":1619276634555,"results":"150","hashOfConfig":"95"},{"size":677,"mtime":1619020329624,"results":"151","hashOfConfig":"95"},{"size":1776,"mtime":1619370211893,"results":"152","hashOfConfig":"95"},{"size":3006,"mtime":1619773519517,"results":"153","hashOfConfig":"95"},{"size":4134,"mtime":1619667329387,"results":"154","hashOfConfig":"95"},{"size":3166,"mtime":1619667329347,"results":"155","hashOfConfig":"95"},{"size":1775,"mtime":1619667329117,"results":"156","hashOfConfig":"95"},{"size":1717,"mtime":1619083354513,"results":"157","hashOfConfig":"95"},{"size":8345,"mtime":1619762527432,"results":"158","hashOfConfig":"95"},{"size":823,"mtime":1619667331462,"results":"159","hashOfConfig":"95"},{"size":1836,"mtime":1619276634553,"results":"160","hashOfConfig":"95"},{"size":1121,"mtime":1619757417073,"results":"161","hashOfConfig":"95"},{"size":352,"mtime":1619276634732,"results":"162","hashOfConfig":"95"},{"size":1520,"mtime":1619667330623,"results":"163","hashOfConfig":"95"},{"size":641,"mtime":1619276634004,"results":"164","hashOfConfig":"95"},{"size":426,"mtime":1619667331171,"results":"165","hashOfConfig":"95"},{"size":807,"mtime":1619338392724,"results":"166","hashOfConfig":"95"},{"size":621,"mtime":1619667331015,"results":"167","hashOfConfig":"95"},{"size":628,"mtime":1619667332675,"results":"168","hashOfConfig":"95"},{"size":1366,"mtime":1619667329215,"results":"169","hashOfConfig":"95"},{"size":9219,"mtime":1619761523565,"results":"170","hashOfConfig":"95"},{"size":0,"mtime":1619548272162,"results":"171","hashOfConfig":"95"},{"size":678,"mtime":1619604254547,"results":"172","hashOfConfig":"95"},{"size":9670,"mtime":1619755676359,"results":"173","hashOfConfig":"95"},{"size":991,"mtime":1619519194484,"results":"174","hashOfConfig":"95"},{"size":10093,"mtime":1619667330136,"results":"175","hashOfConfig":"95"},{"size":1036,"mtime":1619667329361,"results":"176","hashOfConfig":"95"},{"size":676,"mtime":1619667329295,"results":"177","hashOfConfig":"95"},{"size":9073,"mtime":1619667329282,"results":"178","hashOfConfig":"95"},{"size":8787,"mtime":1619695484156,"results":"179","hashOfConfig":"95"},{"size":8692,"mtime":1619696855043,"results":"180","hashOfConfig":"95"},{"size":765,"mtime":1619714427610,"results":"181","hashOfConfig":"95"},{"size":9398,"mtime":1619720435723,"results":"182","hashOfConfig":"95"},{"size":721,"mtime":1619692550766,"results":"183","hashOfConfig":"95"},{"size":1322,"mtime":1619747848222,"results":"184","hashOfConfig":"95"},{"size":1741,"mtime":1619755597503,"results":"185","hashOfConfig":"95"},{"size":832,"mtime":1619667332017,"results":"186","hashOfConfig":"95"},{"size":748,"mtime":1619692550973,"results":"187","hashOfConfig":"95"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ksji1e",{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"204"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"192"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"195"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"195"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"228","messages":"229","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"192"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"192"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"247"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"255","messages":"256","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"195"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"195"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"273","messages":"274","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"275","messages":"276","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"236"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"192"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"289"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"292","messages":"293","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"195"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"299","usedDeprecatedRules":"192"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"304"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"195"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"314","usedDeprecatedRules":"315"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322","usedDeprecatedRules":"323"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"326","usedDeprecatedRules":"327"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"330","usedDeprecatedRules":"204"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"343","messages":"344","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"345","messages":"346","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"347","usedDeprecatedRules":"195"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"352","usedDeprecatedRules":"247"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"355","messages":"356","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"359","messages":"360","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"373","usedDeprecatedRules":"192"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"376","messages":"377","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"382","messages":"383","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"384","usedDeprecatedRules":"195"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"391","messages":"392","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"393","usedDeprecatedRules":"195"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"396","usedDeprecatedRules":"195"},{"filePath":"397","messages":"398","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"399","messages":"400","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"401","usedDeprecatedRules":"195"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"406","messages":"407","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Manager\\SearchFilterIn.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\ActionCreators.js",[],["412","413"],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\configureStore.js",[],["414","415"],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\MainComponent.js",[],["416","417"],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\outOfStockProducts.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\homepagecomponents\\Search.js",["418"],"import {Component} from 'react';\r\nimport '../../css/Some.css'\r\n\r\nclass Search extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.cleanSearch = this.cleanSearch.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.props.setText(event.target.value);\r\n        this.props.searchText();\r\n    }\r\n\r\n    cleanSearch(event) {\r\n        this.props.searchText('');\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        alert('A name was submitted: ' + this.state.value);\r\n        event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                <div className=\"d-flex justify-content-center\">\r\n                    <div className={this.props.searchbar}>\r\n                        <input className=\"search_input\" type=\"text\" name=\"\"\r\n                               value={this.props.text} onChange={this.handleChange} onBlur={this.cleanSearch}\r\n                               onFocus={this.handleChange}\r\n                               placeholder=\"Search...\"/>\r\n                        <a href=\"#\" className=\"search_icon\"><i className=\"fa fa-search\"></i></a>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Search;",["419","420"],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\index.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\MenuComponent.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\ContactComponent.js",["421","422","423","424","425","426","427"],"import React, {Component} from 'react';\r\nimport {Breadcrumb, BreadcrumbItem, Button, Col, Label, Row} from \"reactstrap\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {Control, Errors, Form} from \"react-redux-form\";\r\n\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => (val) && (val.length >= len);\r\nconst isNumber = (val) => !isNaN(Number(val));\r\nconst validEmail = (val) => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);  //regular expression   \r\n\r\nclass Contact extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n\r\n    handleSubmit(values) {\r\n\r\n        this.props.postFeedback(values.firstname, values.lastname, values.email, values.contactType, values.telnum, values.agree);\r\n\r\n        console.log(\"Curent state is: \" + JSON.stringify(values));\r\n\r\n        this.props.resetFeedbackForm();\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Breadcrumb>\r\n                        <BreadcrumbItem><Link to=\"/home\">Home</Link></BreadcrumbItem>\r\n                        <BreadcrumbItem active>Contact Us</BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <div className=\"col-12\">\r\n                        <h3>Contact Us</h3>\r\n                        <hr/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row row-content\">\r\n                    <div className=\"col-12\">\r\n                        <h3>Location Information</h3>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-4 offset-sm-1\">\r\n                        <h5>Our Address</h5>\r\n                        <address>\r\n                            121, Clear Water Bay Road<br/>\r\n                            Clear Water Bay, Kowloon<br/>\r\n                            HONG KONG<br/>\r\n                            <i className=\"fa fa-phone\"></i>: +852 1234 5678<br/>\r\n                            <i className=\"fa fa-fax\"></i>: +852 8765 4321<br/>\r\n                            <i className=\"fa fa-envelope\"></i>: <a\r\n                            href=\"mailto:confusion@food.net\">confusion@food.net</a>\r\n                        </address>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-6 offset-sm-1\">\r\n                        <h5>Map of our Location</h5>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-11 offset-sm-1\">\r\n                        <div className=\"btn-group\" role=\"group\">\r\n                            <a role=\"button\" className=\"btn btn-primary\" href=\"tel:+250786388768\"><i\r\n                                className=\"fa fa-phone\"></i> Call</a>\r\n                            <a href=\"www.skype.com\" role=\"button\" className=\"btn btn-info\"><i className=\"fa fa-skype\"></i> Skype</a>\r\n                            <a role=\"button\" className=\"btn btn-success\" href=\"mailto:paternenught@gmail.com\"><i\r\n                                className=\"fa fa-envelope-o\"></i> Email</a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row row-content\">\r\n                    <div className=\"col-12\">\r\n                        <h3>Send us your feedback</h3>\r\n                    </div>\r\n                    <div className=\"col-12 col-md-9\">\r\n                        <Form model=\"feedback\" onSubmit={(values) => this.handleSubmit(values)}>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"firstname\" md={2}> First Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".firstname\" id=\"firstname\" name=\"firstname\"\r\n                                                  placeholder=\"First Name\"\r\n                                                  className=\"form-control\"\r\n                                                  validators={{\r\n                                                      required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                                  }}\r\n                                    />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".firstname\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 characters',\r\n                                            maxLength: 'Must be 15 chatacters or less'\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"lastname\" md={2}> Last Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".lastname\" id=\"lastname\" name=\"lastname\"\r\n                                                  placeholder=\"Last Name\"\r\n                                                  className=\"form-control\"\r\n                                                  validators={{\r\n                                                      required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                                  }}\r\n                                    />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".lastname\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 characters',\r\n                                            maxLength: 'Must be 15 chatacters or less'\r\n                                        }}\r\n                                    />\r\n\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"telnum\" md={2}> Contact Tel</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".telnum\" id=\"telnum\" name=\"telnum\" placeholder=\"Tel. Number\"\r\n                                                  className=\"form-control\"\r\n                                                  validators={{\r\n                                                      required,\r\n                                                      minLength: minLength(3),\r\n                                                      maxLength: maxLength(15),\r\n                                                      isNumber\r\n                                                  }}\r\n                                    />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".telnum\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 numbers',\r\n                                            maxLength: 'Must be 15 numbers or less',\r\n                                            isNumber: 'Must be a number'\r\n                                        }}\r\n                                    />\r\n\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"email\" md={2}> Email </Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".email\" id=\"email\" name=\"email\" placeholder=\"Email\"\r\n                                                  className=\"form-control\"\r\n                                                  validators={{\r\n                                                      required, validEmail\r\n                                                  }}\r\n                                    />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".email\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            validEmail: 'Invalid Email address'\r\n                                        }}\r\n                                    />\r\n\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{size: 6, offset: 2}}>\r\n                                    <div className=\"form-check\">\r\n                                        <Control.checkbox model=\".agree\" name=\"agree\"\r\n                                                          className=\"form-check-input\"/> {' '}\r\n                                        <strong>May we contact you? </strong>\r\n\r\n                                    </div>\r\n                                </Col>\r\n                                <Col md={{size: 3, offset: 1}}>\r\n                                    <Control.select model=\".contactType\" name=\"contactType\"\r\n                                                    className=\"form-control\">\r\n                                        <option>Tel.</option>\r\n                                        <option>Email</option>\r\n                                    </Control.select>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"message\" md={2}> Your Feedback </Label>\r\n                                <Col md={10}>\r\n                                    <Control.textarea model=\".message\" type=\"textarea\" id=\"message\" name=\"message\"\r\n                                                      rows=\"12\" className=\"form-control\"/>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{size: 10, offset: 2}}>\r\n                                    <Button type=\"submit\" color=\"primary\">\r\n                                        Send Feedback\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </Form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Contact;","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Login.js",["428","429","430","431"],"import React, {Component} from 'react';\r\nimport {Button, Col, Label, Row} from \"reactstrap\";\r\nimport {Control, Errors, Form} from \"react-redux-form\";\r\n\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => (val) && (val.length >= len);\r\nconst isNumber = (val) => !isNaN(Number(val));\r\nconst validEmail = (val) => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);  //regular expression   \r\n\r\nclass Login extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n\r\n    handleSubmit(values) {\r\n\r\n        this.props.postFeedback(values.firstname, values.lastname, values.email, values.contactType, values.telnum, values.agree);\r\n\r\n        console.log(\"Curent state is: \" + JSON.stringify(values));\r\n\r\n        this.props.resetFeedbackForm();\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"d-flex justify-content-center\">\r\n                <div className=\"bg-light shadow-lg mt-5 mb-5 \">\r\n\r\n\r\n                    <div className=\"p-5\">\r\n                        <div className=\"\">\r\n                            <Form model=\"login\" onSubmit={(values) => this.handleSubmit(values)}>\r\n\r\n                                <Row className=\"form-group\">\r\n                                    <Label htmlFor=\"email\" md={2}> Email </Label>\r\n                                    <Col md={10}>\r\n                                        <Control.text model=\".email\" id=\"email\" name=\"email\" placeholder=\"Email\"\r\n                                                      className=\"form-control\"\r\n                                                      validators={{\r\n                                                          required, validEmail\r\n                                                      }}\r\n                                        />\r\n                                        <Errors\r\n                                            className=\"text-danger\"\r\n                                            model=\".email\"\r\n                                            show=\"touched\"\r\n                                            messages={{\r\n                                                required: 'Required',\r\n                                                validEmail: 'Invalid Email address'\r\n                                            }}\r\n                                        />\r\n\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row className=\"form-group\">\r\n                                    <Label htmlFor=\"firstname\" md={2}> Password</Label>\r\n                                    <Col md={10}>\r\n                                        <Control.password model=\".firstname\" id=\"firstname\" name=\"firstname\"\r\n                                                          placeholder=\"Password\"\r\n                                                          className=\"form-control\"\r\n                                                          validators={{\r\n                                                              required,\r\n                                                              minLength: minLength(3),\r\n                                                              maxLength: maxLength(15)\r\n                                                          }}\r\n                                        />\r\n                                        <Errors\r\n                                            className=\"text-danger\"\r\n                                            model=\".firstname\"\r\n                                            show=\"touched\"\r\n                                            messages={{\r\n                                                required: 'Required',\r\n                                                minLength: 'Must be greater than 2 characters',\r\n                                                maxLength: 'Must be 15 chatacters or less'\r\n                                            }}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row className=\"form-group\">\r\n                                    <Col md={{size: 10, offset: 2}}>\r\n                                        <div className=\"form-check\">\r\n                                            <Control.checkbox model=\".agree\" name=\"agree\"\r\n                                                              className=\"form-check-input\"/> {' '}\r\n                                            <strong>Remember password? </strong>\r\n\r\n                                        </div>\r\n                                    </Col>\r\n\r\n                                </Row>\r\n\r\n                                <Row className=\"form-group\">\r\n                                    <Col md={{size: 7, offset: 5}}>\r\n                                        <Button type=\"submit\" color=\"primary\">\r\n                                            Login\r\n                                        </Button>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Form>\r\n                        </div>\r\n                        <div className=\"col-12 col-md-3\"></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\HomeComponent.js",["432","433","434","435","436","437","438","439","440","441","442"],"import React, {useState} from \"react\";\r\nimport {Col, Nav, NavItem, NavLink, Row, TabContent, TabPane} from \"reactstrap\";\r\nimport classnames from 'classnames';\r\nimport {ITEMS} from '../shared/ProductsCategories';\r\nimport '../css/home.css';\r\nimport Header from \"./HeaderComponent\";\r\nimport RenderCard3 from './homepagecomponents/RenderCard3';\r\nimport SearchFilterInM from \"./Manager/SearchFilterIn\";\r\n\r\n\r\nfunction Home(props) {\r\n\r\n    const [activeTab, setActiveTab] = useState('1');\r\n    const [cathegories] = useState(ITEMS);\r\n\r\n    const toggle = tab => {\r\n        if (activeTab !== tab) setActiveTab(tab);\r\n    }\r\n\r\n    //this is important comment\r\n    // let allNavIntem = cathegories.map((cathegory) => {\r\n    //     return (\r\n    //\r\n    //         <NavItem>\r\n    //             <NavLink\r\n    //                 className={classnames({active: activeTab === cathegory.id})}\r\n    //                 onClick={() => {\r\n    //                     toggle(cathegory.id);\r\n    //                 }}>\r\n    //                 {cathegory.name}\r\n    //             </NavLink>\r\n    //         </NavItem>\r\n    //     )\r\n    // });\r\n\r\n    const menu = props.products.products.map((product) => {\r\n        return (\r\n            <div className=\"col-12 col-md-3 pl-1\">\r\n                <RenderCard3 item={product} addToCart={props.addToCart} cart={props.cart}/>\r\n            </div>\r\n        );\r\n    });\r\n\r\n    return (\r\n\r\n        <React.Fragment>\r\n\r\n            <Header/>\r\n            <div className=\"container \">\r\n\r\n                {/*<Nav pills>*/}\r\n                {/*    {allNavIntem}*/}\r\n                {/*</Nav>*/}\r\n                {/*<TabContent activeTab={activeTab}>*/}\r\n                {/*    <TabPane tabId=\"1\">*/}\r\n                {/*        <Row>*/}\r\n                {/*            <Col sm=\"12\">*/}\r\n                {/*                <div className=\"row align-items-start\">*/}\r\n                {/*                    Upcomming*/}\r\n                {/*                    /!*<div className=\"col-12 col-md m-2\">*!/*/}\r\n                {/*                    /!*    <RenderCard item={props.dish}*!/*/}\r\n                {/*                    /!*                isLoading={props.dishesLoading}*!/*/}\r\n                {/*                    /!*                errMess={props.dishesErrMess}/>*!/*/}\r\n                {/*                    /!*</div>*!/*/}\r\n                {/*                    /!*<div className=\"col-12 col-md m-2\">*!/*/}\r\n                {/*                    /!*    <RenderCard item={props.promotion}*!/*/}\r\n                {/*                    /!*                isLoading={props.promosLoading}*!/*/}\r\n                {/*                    /!*                errMess={props.promosErrMess}/>*!/*/}\r\n                {/*                    /!*</div>*!/*/}\r\n                {/*                    /!*<div className=\"col-12 col-md m-2\">*!/*/}\r\n                {/*                    /!*    <RenderCard item={props.hotdeal}*!/*/}\r\n                {/*                    /!*                isLoading={props.hotdealsLoading}*!/*/}\r\n                {/*                    /!*                errMess={props.hotdealsErrMess}/>*!/*/}\r\n                {/*                    /!*</div>*!/*/}\r\n                {/*                </div>*/}\r\n                {/*            </Col>*/}\r\n                {/*        </Row>*/}\r\n                {/*    </TabPane>*/}\r\n                {/*    <TabPane tabId=\"2\">*/}\r\n                {/*        <Row>*/}\r\n\r\n                {/*            {menu}*/}\r\n\r\n                {/*        </Row>*/}\r\n                {/*    </TabPane>*/}\r\n                {/*</TabContent>*/}\r\n                <section className=\"about-section\">\r\n                    <article>\r\n                        <h3>\r\n                            Section for the text why your restaurant is the best.\r\n                        </h3>\r\n                        <p>\r\n                            Lorem ipsum dolor sit, amet consectetur adipisicing elit.\r\n                            A quos, voluptatum illum mollitia dolores libero placeat\r\n                            nesciunt quasi adipisci impedit!Lorem ipsum dolor sit,\r\n                            amet consectetur adipisicing elit.\r\n                            A quos, voluptatum illum mollitia dolores libero placeat\r\n                            nesciunt quasi adipisci impedit!\r\n                            Lorem ipsum dolor sit, amet consectetur adipisicing elit.\r\n                            A quos, voluptatum illum mollitia dolores libero placeat\r\n                            nesciunt quasi adipisci impedit!Lorem ipsum dolor sit.\r\n                        </p>\r\n                    </article>\r\n                </section>\r\n                <div id=\"carouselExampleControls\" className=\"carousel slide\" data-ride=\"carousel\">\r\n                    <div className=\"carousel-inner\">\r\n                        <div className=\"carousel-item active\">\r\n                            <img src=\"https://firebasestorage.googleapis.com/v0/b/resto247-2c1f2.appspot.com/o/images%2Frachel-park-hrlvr2ZlUNk-unsplash.jpg?alt=media&token=206b6974-4f50-48ad-8dbd-f0b59b040a45\" className=\"d-block w-100\" alt=\"food\"/>\r\n                        </div>\r\n                        <div className=\"carousel-item\">\r\n                            <img src=\"https://firebasestorage.googleapis.com/v0/b/resto247-2c1f2.appspot.com/o/images%2Flily-banse--YHSwy6uqvk-unsplash.jpg?alt=media&token=1bd3db4f-ff6c-45f9-b49d-6d9d8231c272\" className=\"d-block w-100\" alt=\"food\"/>\r\n                        </div>\r\n                        <div className=\"carousel-item\">\r\n                            <img src=\"https://firebasestorage.googleapis.com/v0/b/resto247-2c1f2.appspot.com/o/images%2Fbrooke-lark-aGjP08-HbYY-unsplash.jpg?alt=media&token=cd771977-dadb-440d-b6b5-a6e8aeae44fd\" className=\"d-block w-100\" alt=\"food\"/>\r\n                        </div>\r\n                    </div>\r\n                    <a className=\"carousel-control-prev\" href=\"#carouselExampleControls\" role=\"button\"\r\n                       data-slide=\"prev\">\r\n                        <span className=\"carousel-control-prev-icon\" aria-hidden=\"true\"></span>\r\n                        <span className=\"sr-only\">Previous</span>\r\n                    </a>\r\n                    <a className=\"carousel-control-next\" href=\"#carouselExampleControls\" role=\"button\"\r\n                       data-slide=\"next\">\r\n                        <span className=\"carousel-control-next-icon\" aria-hidden=\"true\"></span>\r\n                        <span className=\"sr-only\">Next</span>\r\n                    </a>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                    <div className=\" d-flex justify-content-center p-2 mt-3\">\r\n                        <h1> Our Products </h1>\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <SearchFilterInM cardToRender={\"RenderCard3\"} allProducts={props.products.products}\r\n                                 isLoading={props.products.isLoading}\r\n                                 cart={props.cart}\r\n                                 addToCart={props.addToCart}\r\n                                 errMess={props.products.errMess}/>\r\n\r\n\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Home;","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\products.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\comments.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\FooterComponent.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\recommanded.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Navigation.js",["443","444","445","446"],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\AboutComponent.js",["447","448"],"import React from 'react';\r\nimport {Breadcrumb, BreadcrumbItem, Card, CardBody, CardHeader, Media} from 'reactstrap';\r\nimport {Link} from 'react-router-dom';\r\nimport {Fade, Stagger} from \"react-animation-components\";\r\nimport {Loading} from \"./LoadingComponent\";\r\n\r\nfunction RenderLeader(props) {\r\n\r\n    return (\r\n\r\n        <Stagger in>\r\n            <Fade in>\r\n                <Media className=\"mt-5\" tag=\"li\">\r\n                    <Media left middle>\r\n                        <Media object src=\"\" alt=\"\"/>\r\n                    </Media>\r\n                    <Media body className=\"ml-5\">\r\n                        <Media heading>upcomming</Media>\r\n                        <p>upcomming later</p>\r\n                        <p>upcomming</p>\r\n                    </Media>\r\n                </Media>\r\n\r\n            </Fade>\r\n        </Stagger>\r\n    );\r\n\r\n\r\n}\r\n\r\n\r\nconst AboutStatic = () => {\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <Breadcrumb>\r\n                    <BreadcrumbItem><Link to=\"/home\">Home</Link></BreadcrumbItem>\r\n                    <BreadcrumbItem active>About Us</BreadcrumbItem>\r\n                </Breadcrumb>\r\n                <div className=\"col-12\">\r\n                    <h3>About Us</h3>\r\n                    <hr/>\r\n                </div>\r\n            </div>\r\n            <div className=\"row row-content\">\r\n                <div className=\"col-12 col-md-6\">\r\n                    <h2>Our History</h2>\r\n                    <p>Started in 2010, Ristorante con Fusion quickly established itself as a culinary icon par\r\n                        excellence in Hong Kong. With its unique brand of world fusion cuisine that can be found nowhere\r\n                        else, it enjoys patronage from the A-list clientele in Hong Kong. Featuring four of the best\r\n                        three-star Michelin chefs in the world, you never know what will arrive on your plate the next\r\n                        time you visit us.</p>\r\n                    <p>The restaurant traces its humble beginnings to <em>The Frying Pan</em>, a successful chain\r\n                        started by our CEO, Mr. Peter Pan, that featured for the first time the world's best cuisines in\r\n                        a pan.</p>\r\n                </div>\r\n                <div className=\"col-12 col-md-5\">\r\n                    <Card>\r\n                        <CardHeader className=\"bg-primary text-white\">Facts At a Glance</CardHeader>\r\n                        <CardBody>\r\n                            <dl className=\"row p-1\">\r\n                                <dt className=\"col-6\">Started</dt>\r\n                                <dd className=\"col-6\">3 Feb. 2013</dd>\r\n                                <dt className=\"col-6\">Major Stake Holder</dt>\r\n                                <dd className=\"col-6\">HK Fine Foods Inc.</dd>\r\n                                <dt className=\"col-6\">Last Year's Turnover</dt>\r\n                                <dd className=\"col-6\">$1,250,375</dd>\r\n                                <dt className=\"col-6\">Employees</dt>\r\n                                <dd className=\"col-6\">40</dd>\r\n                            </dl>\r\n                        </CardBody>\r\n                    </Card>\r\n                </div>\r\n                <div className=\"col-12\">\r\n                    <Card>\r\n                        <CardBody className=\"bg-faded\">\r\n                            <blockquote className=\"blockquote\">\r\n                                <p className=\"mb-0\">You better cut the pizza in four pieces because\r\n                                    I'm not hungry enough to eat six.</p>\r\n                                <footer className=\"blockquote-footer\">Yogi Berra,\r\n                                    <cite title=\"Source Title\">The Wit and Wisdom of Yogi Berra,\r\n                                        P. Pepe, Diversion Books, 2014</cite>\r\n                                </footer>\r\n                            </blockquote>\r\n                        </CardBody>\r\n                    </Card>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nfunction About(props) {\r\n    // const leaders = props.leaders.leaders.map((leader) => {\r\n    //     return (\r\n    //         <RenderLeader leader={leader}/>\r\n    //     );\r\n    // });\r\n    // if (props.leaders.isLoading) {\r\n    //     return (\r\n    //         <div className='container'>\r\n    //             <AboutStatic/>\r\n    //             <div className=\"row\">\r\n    //                 <Loading/>\r\n    //             </div>\r\n    //         </div>\r\n    //     );\r\n    // } else if (props.leaders.errMess) {\r\n    //     return (\r\n    //         <div className='container'>\r\n    //             <AboutStatic/>\r\n    //             <div className=\"row\">\r\n    //                 <h4>{props.leaders.errMess}</h4>\r\n    //             </div>\r\n    //         </div>\r\n    //     );\r\n    // } else\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <AboutStatic/>\r\n                <div className=\"row row-content\">\r\n\r\n                    <div className=\"col-12\">\r\n                        <h2>Corporate Leadership</h2>\r\n                    </div>\r\n                    <div className=\"col-12\">\r\n                        <Media list>\r\n                            upcomming\r\n                        </Media>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n}\r\n\r\nexport default About;    ","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\DishdetailComponent.js",["449","450","451"],"import React, {Component} from \"react\";\r\nimport {\r\n    Breadcrumb,\r\n    BreadcrumbItem,\r\n    Button,\r\n    Card,\r\n    CardBody,\r\n    CardImg,\r\n    CardText,\r\n    CardTitle,\r\n    Col,\r\n    Label,\r\n    Modal,\r\n    ModalBody,\r\n    ModalHeader,\r\n    Row\r\n} from 'reactstrap';\r\nimport {Link} from \"react-router-dom\";\r\nimport {Control, Errors, LocalForm} from \"react-redux-form\";\r\nimport {Loading} from \"./LoadingComponent\";\r\nimport {Fade, FadeTransform, Stagger} from \"react-animation-components\";\r\n\r\n\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => (val) && (val.length >= len);\r\n\r\nclass CommentForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isModalOpen: false\r\n        }\r\n\r\n        this.togglerModal = this.togglerModal.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    togglerModal() {\r\n        this.setState({\r\n            isModalOpen: !this.state.isModalOpen\r\n        });\r\n    }\r\n\r\n    handleSubmit(values) {\r\n        this.props.postComment(this.props.dishId, values.rating, values.author, values.comment);\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Button outline onClick={this.togglerModal}><span className=\"fa fa-pencil\"></span> Submit\r\n                    Comment</Button>\r\n\r\n                <Modal isOpen={this.state.isModalOpen} toggle={this.togglerModal}>\r\n                    <ModalHeader toggle={this.togglerModal}>Submit Comment.</ModalHeader>\r\n                    <ModalBody>\r\n                        <LocalForm onSubmit={(values) => this.handleSubmit(values)}>\r\n\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"rating\" md={12}> Rating </Label>\r\n                                <Col md={12}>\r\n                                    <Control.select model=\".rating\" name=\"rating\"\r\n                                                    className=\"form-control\">\r\n                                        <option>1</option>\r\n                                        <option>2</option>\r\n                                        <option>3</option>\r\n                                        <option>4</option>\r\n                                        <option>5</option>\r\n                                        <option>5</option>\r\n                                        <option>6</option>\r\n                                    </Control.select>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"author\" md={12}> Your Name </Label>\r\n                                <Col md={12}>\r\n                                    <Control.text model=\".author\" id=\"author\" name=\"author\" placeholder=\"Name\"\r\n                                                  className=\"form-control\"\r\n                                                  validators={{\r\n                                                      maxLength: maxLength(15), minLength: minLength(3)\r\n                                                  }}\r\n                                    />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".author\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'reqired',\r\n                                            maxLength: 'Should be less than or equal to 15 characters',\r\n                                            minLength: 'Should at least be three characters long'\r\n                                        }}\r\n                                    />\r\n\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"comment\" md={12}> Comment </Label>\r\n                                <Col md={12}>\r\n                                    <Control.textarea model=\".comment\" type=\"textarea\" id=\"comment\" name=\"comment\"\r\n                                                      rows=\"6\" className=\"form-control\"/>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col>\r\n                                    <Button type=\"submit\" color=\"primary\">\r\n                                        Submit\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n                    </ModalBody>\r\n                </Modal>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\nfunction RenderDish({dish}) {\r\n    if (dish != null)\r\n        return (\r\n            <FadeTransform in\r\n                           trasformProps={{\r\n                               exitTransform: 'scale(0.5) translateY(-50%)'\r\n                           }}>\r\n                <Card className=\"m-1\">\r\n                    <CardImg top src={dish.image} alt={dish.name}/>\r\n                    <CardBody>\r\n                        <CardTitle>{dish.name}</CardTitle>\r\n                        <CardText>{dish.description}</CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            </FadeTransform>\r\n\r\n        );\r\n    else\r\n        return (\r\n            <div></div>\r\n        );\r\n}\r\n\r\nfunction RenderComments({comment, postComment, dishId}) {\r\n    const comments = comment.map((comment) => {\r\n        return (\r\n            <div key={comment.id}>\r\n                <ul className=\"list-unstyled \">\r\n                    <Stagger in>\r\n                        <Fade in>\r\n                            <li>\r\n                                {comment.comment}\r\n                            </li>\r\n                            <li>\r\n                                -- {comment.author} , {new Intl.DateTimeFormat('en-US', {\r\n                                year: 'numeric',\r\n                                month: 'short',\r\n                                day: '2-digit'\r\n                            }).format(new Date(Date.parse(comment.date)))}\r\n                            </li>\r\n                        </Fade>\r\n                    </Stagger>\r\n                </ul>\r\n\r\n            </div>\r\n        );\r\n\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <h4>Comments</h4>\r\n            {comments}\r\n            <CommentForm dishId={dishId} postComment={postComment}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst DishDetail = (props) => {\r\n    if (props.isLoading) {\r\n        return (\r\n            <div className='container'>\r\n                <div className=\"row\">\r\n                    <Loading/>\r\n                </div>\r\n            </div>\r\n        );\r\n    } else if (props.errMess) {\r\n        return (\r\n            <div className='container'>\r\n                <div className=\"row\">\r\n                    <h4>{props.errMess}</h4>\r\n                </div>\r\n            </div>\r\n        );\r\n    } else if (props.dish != null) {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Breadcrumb>\r\n                        <BreadcrumbItem><Link to=\"/menu\">Menu</Link></BreadcrumbItem>\r\n                        <BreadcrumbItem active>{props.dish.name}</BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <div className=\"col-12\">\r\n                        <h3>{props.dish.name}</h3>\r\n                        <hr/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-12 col-sm m-1\">\r\n                        <RenderDish dish={props.dish}/>\r\n                    </div>\r\n\r\n                    <div className=\"col-12 col-sm m-1\">\r\n                        <RenderComments comment={props.comments}\r\n                                        postComment={props.postComment}\r\n                                        dishId={props.dish.id}\r\n                        />\r\n\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    } else {\r\n        return (\r\n            <div></div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default DishDetail;\r\n\r\n","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\Forms.js",[],["452","453"],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Receptions\\WiterHome.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\ActionTypes.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\LoadingComponent.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\HeaderComponent.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\shared\\baseUrl.js",[],["454","455"],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\shared\\dishes.js",[],["456","457"],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\shared\\ProductsCategories.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\homepagecomponents\\HotDeal.js",["458"],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\homepagecomponents\\FistScreen.js",["459","460"],"import '../../css/Some.css'\r\nimport {Button, Carousel, CarouselCaption, CarouselControl, CarouselIndicators, CarouselItem} from 'reactstrap';\r\n\r\nimport {useState} from 'react';\r\nimport {ITEMS} from '../../shared/carouselHome';\r\n\r\n\r\nlet FirstScreen = (props) => {\r\n\r\n\r\n    const [activeIndex, setActiveIndex] = useState(0);\r\n    const [animating, setAnimating] = useState(false);\r\n    const [items, setItems] = useState(ITEMS)\r\n\r\n    const next = () => {\r\n        if (animating) return;\r\n        const nextIndex = activeIndex === items.length - 1 ? 0 : activeIndex + 1;\r\n        setActiveIndex(nextIndex);\r\n    }\r\n\r\n    const previous = () => {\r\n        if (animating) return;\r\n        const nextIndex = activeIndex === 0 ? items.length - 1 : activeIndex - 1;\r\n        setActiveIndex(nextIndex);\r\n    }\r\n\r\n    const goToIndex = (newIndex) => {\r\n        if (animating) return;\r\n        setActiveIndex(newIndex);\r\n    }\r\n\r\n    const slides = items.map((item) => {\r\n        return (\r\n\r\n            <CarouselItem className=\"mainCarouselItem\"\r\n                          onExiting={() => setAnimating(true)}\r\n                          onExited={() => setAnimating(false)}\r\n                          key={item.src}\r\n            >\r\n                <img className=\"carouselImageMain\" src={item.src} alt={item.altText}/>\r\n\r\n                <CarouselCaption captionText=\"\" captionHeader={\r\n                    <section className=\"section-intro\">\r\n                    <header>\r\n                    <h1 className=\"mb-5\">247Resto</h1>\r\n                    </header>\r\n                    <div className=\"link-to-book-wrapper\">\r\n                    <a className=\"link-to-book\" href=\"#reservations\">Order Now</a>\r\n                    </div>\r\n                    </section>\r\n\r\n\r\n                }\r\n\r\n                                 CaptionFooter={<p>Just test</p>}\r\n                />\r\n            </CarouselItem>\r\n        );\r\n    });\r\n\r\n    return (\r\n\r\n        <Carousel id=\"mainCarousel\"\r\n                  activeIndex={activeIndex}\r\n                  next={next}\r\n                  previous={previous}\r\n        >\r\n            <CarouselIndicators items={items} activeIndex={activeIndex} onClickHandler={goToIndex}/>\r\n            {slides}\r\n            <CarouselControl direction=\"prev\" directionText=\"Previous\" onClickHandler={previous}/>\r\n            <CarouselControl direction=\"next\" directionText=\"Next\" onClickHandler={next}/>\r\n        </Carousel>\r\n\r\n\r\n    );\r\n\r\n\r\n}\r\n\r\n\r\nexport default FirstScreen;","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Manager\\FlippingCard.js",["461","462","463"],"import React, {useState} from \"react\";\r\nimport '../../css/Manager.css';\r\nimport {Form, FormGroup, Input, Label} from \"reactstrap\";\r\nimport {setImage} from \"../../functions/setImage\";\r\n\r\nconst FlippingCard = ({\r\n                          increaseStock, oneProduct, showPriceField = true,\r\n                          opName, handleSaving,\r\n                          behaviors, changeFlippingCardSaveBehavior\r\n                      }) => {\r\n\r\n    return (\r\n        <div className=\"page-container\">\r\n\r\n            <BlogCard oneProduct={oneProduct}\r\n                      behaviors={behaviors}\r\n                      opName={opName}\r\n                      handleSaving={handleSaving}\r\n                      changeFlippingCardSaveBehavior={changeFlippingCardSaveBehavior}\r\n                      increaseStock={increaseStock}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst BlogCard = (props) => {\r\n\r\n    const [flipped, setFlipped] = useState(false);\r\n\r\n    let flip = () => {\r\n        setFlipped(!flipped);\r\n\r\n    }\r\n\r\n    return (\r\n\r\n\r\n        <div onMouseEnter={flip} onMouseLeave={flip} className={\"card-container\" + (flipped ? \" flipped\" : \"\")}>\r\n\r\n            <Front  opName={props.opName} oneProduct={props.oneProduct}/>\r\n\r\n            <Back oneProduct={props.oneProduct}\r\n                  behaviors={props.behaviors}\r\n                  opName={props.opName}\r\n                  handleSaving={props.handleSaving}\r\n                  changeFlippingCardSaveBehavior={props.changeFlippingCardSaveBehavior}\r\n                  increaseStock={props.increaseStock}/>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nconst Front = ({oneProduct, opName}) => {\r\n\r\n    return (\r\n        <div className=\"front\">\r\n            <ImageArea  opName={opName} oneProduct={oneProduct}/>\r\n            <MainArea  opName={opName} oneProduct={oneProduct}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Back = (props) => {\r\n    const [qtyN, setQtyN] = useState('');\r\n    const [unitPrice, setUnitPrice] = useState(0);\r\n    const [behavior, setBehavior] = useState('enable');\r\n    const [errorM, setErrorM] = useState(null);\r\n    const [comesFrom, setComesFrom] = useState('suppler');\r\n    const [goesTo, setGoesTo] = useState('kitchen');\r\n    const [disabled, setDisabled] = useState(true);\r\n    const [soldPrice, setSoldPrice] = useState(0);\r\n\r\n\r\n    const handleChange = (event) => {\r\n        event.preventDefault();\r\n        let name = event.target.name;\r\n        let value = event.target.value;\r\n        if (name === 'qtyN') {\r\n            setQtyN(value);\r\n        } else if (name === 'unitPrice') {\r\n            setUnitPrice(value);\r\n        } else if (name === 'goesTo') {\r\n            setGoesTo(value);\r\n        } else if (name === 'comesFrom') {\r\n            setComesFrom(value);\r\n        } else if (name === 'soldPrice') {\r\n            setSoldPrice(value);\r\n        }\r\n    }\r\n    const handleSave = (event) => {\r\n        event.preventDefault();\r\n        setBehavior('loading');\r\n        setTimeout(() => {\r\n            setBehavior('enable');\r\n        }, 2000);\r\n        if (props.opName === 'dailyUsage') {\r\n            props.handleSaving({\r\n                id: props.oneProduct.id,\r\n                unitPrice: unitPrice,\r\n                quantity: qtyN,\r\n                to: goesTo,\r\n                name: props.oneProduct.name\r\n            });\r\n        } else if (props.opName === 'resources') {\r\n            props.handleSaving({\r\n                id: props.oneProduct.id,\r\n                unitPrice: unitPrice,\r\n                quantity: qtyN,\r\n                from: comesFrom,\r\n                name: props.oneProduct.name\r\n            });\r\n            // props.increaseStock(props.oneProduct.id, unitPrice,qtyN,\"suppler\", props.oneProduct.name );\r\n        } else if (props.opName === 'products') {\r\n            props.handleSaving({\r\n                id: props.oneProduct.id,\r\n                buyUnitPrice: unitPrice,\r\n                category: props.oneProduct.category,\r\n                description: props.oneProduct.description,\r\n                featured: true,\r\n                image: props.oneProduct.image,\r\n                marched: props.oneProduct.marched,\r\n                name: props.oneProduct.name,\r\n                price: soldPrice,\r\n                quantity: qtyN\r\n            });\r\n        }\r\n    }\r\n    let additionalField = null;\r\n    let otherField;\r\n    if (props.opName === 'products') {\r\n        // setQtyN(props.oneProduct.quantity);\r\n        // setSoldPrice(props.oneProduct.price);\r\n        // setUnitPrice(props.oneProduct.buyUnitPrice);\r\n\r\n        additionalField = <FormGroup className=\"\">\r\n\r\n            <Label className=\"\"> Sold Price </Label>\r\n            <Input onChange={handleChange} value={soldPrice} name=\"soldPrice\" className=\"\" type={\"number\"}/>\r\n        </FormGroup>\r\n        otherField = <React.Fragment>\r\n            <FormGroup className=\"\">\r\n\r\n                <Label className=\"\"> unit price </Label>\r\n                <Input disabled={(disabled) ? \"disabled\" : \"\"} onChange={handleChange} value={unitPrice}\r\n                       name=\"unitPrice\" className=\"\" type={\"number\"}/>\r\n            </FormGroup>\r\n            <FormGroup>\r\n                <Label className=\"\">quantity</Label>\r\n                <Input disabled={(disabled) ? \"disabled\" : \"\"} onChange={handleChange} value={qtyN} name=\"qtyN\"\r\n                       className=\"\" type=\"number\"/>\r\n            </FormGroup>\r\n        </React.Fragment>\r\n    } else {\r\n        otherField = <React.Fragment>\r\n\r\n            <FormGroup className=\"\">\r\n\r\n                <Label className=\"\"> unit price </Label>\r\n                <Input onChange={handleChange} value={unitPrice} name=\"unitPrice\" className=\"\" type={\"number\"}/>\r\n            </FormGroup>\r\n            <FormGroup>\r\n                <Label className=\"\">quantity</Label>\r\n                <Input onChange={handleChange} value={qtyN} name=\"qtyN\" className=\"\" type=\"number\"/>\r\n            </FormGroup>\r\n        </React.Fragment>\r\n\r\n        if (props.opName === 'dailyUsage') {\r\n            additionalField = <FormGroup className=\"\">\r\n\r\n                <Label className=\"\"> goes To </Label>\r\n                <Input onChange={handleChange} value={goesTo} name=\"goesTo\" className=\"\" type={\"text\"}/>\r\n            </FormGroup>;\r\n        } else if (props.opName === 'resources') {\r\n            additionalField = <FormGroup className=\"\">\r\n\r\n                <Label className=\"\"> comes From </Label>\r\n                <Input onChange={handleChange} value={comesFrom} name=\"comesFrom\" className=\"\" type={\"text\"}/>\r\n            </FormGroup>;\r\n        }\r\n    }\r\n\r\n    let button = null;\r\n\r\n    if (behavior === 'loading') {\r\n        button = <button type=\"button\" className=\"btn btn-warning\"><span className=\"fa fa-spinner\"></span></button>\r\n    } else if (behavior === 'enable') {\r\n        button = <button type=\"button\" onClick={handleSave} className=\"btn btn-warning\"> Save</button>;\r\n    }\r\n\r\n    // if(props.behaviors.flippingCardSaveButton === 'failed'){\r\n    //     setErrorM('error occur while saving');\r\n    //     props.changeFlippingCardSaveBehavior('enable');\r\n    // }\r\n\r\n\r\n    return (\r\n        <div className=\"back\">\r\n            <h2 className=\"bg-warning d-flex justify-content-center pb-2\"> {props.oneProduct.name} </h2>\r\n            <span className=\"text-danger\"> {errorM}</span>\r\n            <Form>\r\n\r\n\r\n                {otherField}\r\n                {additionalField}\r\n                <FormGroup>\r\n                    {button}\r\n                </FormGroup>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nlet ImageArea = ({oneProduct}) => {\r\n    setImage(oneProduct.image);\r\n\r\n    return (\r\n        <div className=\"image-container\">\r\n            <img className={\"card-image \" + oneProduct.image} src=''></img>\r\n            <h1 className=\"title\">{oneProduct.name}</h1>\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\n\r\nvar MainArea = ({oneProduct, opName}) => {\r\n\r\n    let field1 = null;\r\n    let field2 = null;\r\n    if(opName==='dailyUsage'){\r\n        field1 =<React.Fragment>\r\n            <div className={\"col-6\"}>\r\n            <Label className=\"\"> total Price </Label>\r\n        </div>\r\n        <div className=\"col-5 offset-1\">\r\n            <span className=\"badge badge-warning rounded\"> {oneProduct.totalCost}</span>\r\n        </div>\r\n        </React.Fragment>\r\n\r\n        field2 = <React.Fragment>\r\n            <div className={\"col-6\"}>\r\n                <Label className=\"\"> Quantity Left </Label>\r\n            </div>\r\n            <div className=\"col-5 offset-1\">\r\n                <span className=\"badge badge-warning rounded\"> {oneProduct.stockQuantity} </span>\r\n            </div>\r\n\r\n        </React.Fragment>\r\n    }else if(opName==='resources'){\r\n        field1 =<React.Fragment>\r\n            <div className={\"col-6\"}>\r\n                <Label className=\"\"> total Price </Label>\r\n            </div>\r\n            <div className=\"col-5 offset-1\">\r\n                <span className=\"badge badge-warning rounded\"> {oneProduct.totalCost}</span>\r\n            </div>\r\n        </React.Fragment>\r\n\r\n        field2 = <React.Fragment>\r\n            <div className={\"col-6\"}>\r\n                <Label className=\"\"> Quantity Left </Label>\r\n            </div>\r\n            <div className=\"col-5 offset-1\">\r\n                <span className=\"badge badge-warning rounded\"> {oneProduct.stockQuantity} </span>\r\n            </div>\r\n\r\n        </React.Fragment>\r\n\r\n    }else if(opName==='products'){\r\n        field1 =<React.Fragment>\r\n            <div className={\"col-6\"}>\r\n                <Label className=\"\">  Price </Label>\r\n            </div>\r\n            <div className=\"col-5 offset-1\">\r\n                <span className=\"badge badge-warning rounded\"> {oneProduct.price}</span>\r\n            </div>\r\n        </React.Fragment>\r\n\r\n        field2 = <React.Fragment>\r\n            <div className={\"col-6\"}>\r\n                <Label className=\"\"> Quantity Left </Label>\r\n            </div>\r\n            <div className=\"col-5 offset-1\">\r\n                <span className=\"badge badge-warning rounded\"> {oneProduct.quantity} </span>\r\n            </div>\r\n\r\n        </React.Fragment>\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"main-area\">\r\n            <div className=\"blog-post\">\r\n                <div className=\" row date\">\r\n                    {field1}\r\n\r\n                </div>\r\n                <div className=\" row date \">\r\n                    {field2}\r\n\r\n                </div>\r\n                <p className=\"read-more\">Hover to Edit...</p>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FlippingCard;","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\shared\\hotDealData.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\shared\\carouselHome.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Manager\\SearchOutputDisplay.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\Users.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\hotdeals.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\homepagecomponents\\RenderCard.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Receptions\\UIcomponents\\HotDeal.js",["464","465"],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Manager\\UIcomponents\\ReactDatePicker.js",["466"],"import React, {Component} from 'react'\r\nimport {Alert, FormGroup, FormText, Label} from 'reactstrap'\r\n\r\nvar DatePicker = require(\"reactstrap-date-picker\");\r\n\r\nclass ReactDatePicker extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            value: new Date().toISOString(),\r\n            formattedValue: 'Today',\r\n            selectedDate: false\r\n        }\r\n    }\r\n\r\n    handleChange(value, formattedValue) {\r\n        this.setState({\r\n            value: value, // ISO String, ex: \"2016-11-19T12:00:00.000Z\"\r\n            formattedValue: formattedValue // Formatted String, ex: \"11/19/2016\"\r\n        })\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        // Access ISO String and formatted values from the DOM.\r\n        var hiddenInputElement = document.getElementById(\"example-datepicker\");\r\n        console.log(hiddenInputElement.value); // ISO String, ex: \"2016-11-19T12:00:00.000Z\"\r\n        console.log(hiddenInputElement.getAttribute('data-formattedvalue')) // Formatted String, ex: \"11/19/2016\"\r\n\r\n        let timestamp = Date.parse(hiddenInputElement.getAttribute('data-formattedvalue'));\r\n        let startDate = new Date(timestamp);\r\n        let endDate = new Date(timestamp);\r\n        startDate.setHours(0, 0, 0, 0);\r\n        endDate.setHours(23, 59, 59, 0);\r\n        console.log(\"dkfdf;lkaj;ljidklfjkgjkld;fj;ldkfj;lkdjfa;lkdjfa;lkjf;lakjf;lajf;jka;fja;lkjdf;ajf;akjf;ljf;l\");\r\n        this.props.changeDailyInvoices(startDate, endDate);\r\n        this.props.changeDailyDetailsInvoices(startDate, endDate);\r\n        this.props.changeDailyStockUp(startDate, endDate);\r\n        this.props.changeDailyMiscellaneous(startDate,endDate);\r\n        this.props.changeDailyResourcesReports(startDate,endDate);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <FormGroup>\r\n                <Label> </Label>\r\n                <DatePicker id=\"example-datepicker\"\r\n                            value={this.state.value}\r\n                            onChange={(v, f) => this.handleChange(v, f)}/>\r\n                <FormText> <Alert color=\"info\">Selected Date: <b> {this.state.formattedValue} </b> click <a\r\n                    className=\"alert-link\">here </a> to fetch data</Alert> </FormText>\r\n            </FormGroup>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ReactDatePicker;","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Manager\\UIcomponents\\ItemsSold.js",[],["467","468"],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Receptions\\UIcomponents\\ReactInfiniteScroll.js",["469"],"import React, {Component} from \"react\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\n\r\nclass ReactInfiniteScroll extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n\r\n\r\n        // this.state = {\r\n        //     items2: arr,\r\n        //     hasMoreS:true,\r\n        //     itemsToFetch: lastIndex,\r\n        //     itemToStartOn: lastIndex\r\n        // };\r\n\r\n    }\r\n\r\n\r\n    fetchMoreData = () => {\r\n\r\n        // a fake async api call like which sends\r\n        // 20 more records in 1.5 secs\r\n        setTimeout(() => {\r\n            // this.setState({\r\n            //\r\n            //     items2: [...this.state.items2,...this.funMenu()]\r\n            //\r\n            // });\r\n            let item2 = [...this.props.items2, ...this.props.funMenu()];\r\n\r\n            this.props.setItems2(item2);\r\n        }, 1500);\r\n    };\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"mt-2\">\r\n                <InfiniteScroll\r\n                    scrollableTarget={this.props.scrollableDiv}\r\n                    dataLength={this.props.items2.length}\r\n                    next={this.fetchMoreData}\r\n                    hasMore={this.props.hasMoreS}\r\n                    loader={<h4>Loading...</h4>}\r\n                    endMessage={\r\n                        <p> no more results </p>\r\n                    }\r\n\r\n                >\r\n                    <div className=\"row\">\r\n                        {\r\n                            this.props.items2.map(\r\n                                (item, i) => {\r\n                                    return (\r\n                                        <span>{item}\r\n                                \r\n                                </span>\r\n                                    )\r\n                                }\r\n                            )\r\n                        }\r\n                    </div>\r\n                </InfiniteScroll>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default ReactInfiniteScroll;\r\n","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\reportWebVitals.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\homepagecomponents\\RenderCard2.js",["470","471"],"import { Card, CardImg, CardBody, CardTitle, CardSubtitle, CardText,  CardImgOverlay, Button, Row, Col } from \"reactstrap\";\r\nimport { Loading } from \"../LoadingComponent\";\r\nimport { baseUrl } from \"../../shared/baseUrl\";\r\nimport { FadeTransform } from \"react-animation-components\";\r\n\r\nfunction RenderCard2({ item, onClick }) {\r\n    //categorized cards\r\n\r\n    if (item.isLoading) {\r\n        return (\r\n            <Loading />\r\n        );\r\n    }\r\n    else if (item.errMess) {\r\n        return (\r\n            <h4> {item.errMess} </h4>\r\n        );\r\n    }\r\n    else\r\n        return (\r\n\r\n            <FadeTransform in\r\n                transformProps={{\r\n                    exitTransform: 'scale(0.5) translateY(-50%)'\r\n                }} >\r\n                    <div className=\"m-2\"> \r\n                <Card inverse className=\"\" style={{ width: '16rem' }}>\r\n                    <CardImg width=\"100%\" src={baseUrl + item.image} alt={item.name} />\r\n                    <CardImgOverlay>\r\n                        <CardTitle tag=\"h6\"  >\r\n                            <div className=\"p-1 w-100 color3\">{item.name}\r\n                                <div className=\"badge badge-warning priceInHomepage\"> 3000 RWF </div>\r\n                            </div>\r\n\r\n\r\n                        </CardTitle>\r\n                        {item.designation ? <CardSubtitle>{item.designation}</CardSubtitle> : item.description}\r\n                        <CardText>\r\n                            <small className=\"text-muted\">Last updated 3 mins ago</small>\r\n                        </CardText>\r\n                    </CardImgOverlay>\r\n                    <CardBody className=\"cardBodyForProductShow\">\r\n\r\n                        <div className=\"row\">\r\n\r\n\r\n                            <Button size=\"sm\" className=\"bg-light  read-more-btn col-6 \">\r\n                                <i className=\"fa fa-lg fa-info read-more-icon\" aria-hidden=\"true\"></i> Read More\r\n                            </Button>\r\n\r\n\r\n                            <Button size=\"sm\" className=\"col-6 bg-light add-to-cart-btn\">\r\n                                <i className=\"fa fa-lg fa-cart-plus  add-to-cart-icon\" aria-hidden=\"true\"></i> Add to cart\r\n                                </Button>\r\n\r\n                        </div>\r\n\r\n                    </CardBody>\r\n                </Card>\r\n                </div>\r\n            </FadeTransform>\r\n\r\n        );\r\n} \r\n\r\n\r\nexport default RenderCard2;",["472","473"],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Receptions\\UIcomponents\\FilterMenu.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Receptions\\UIcomponents\\CicleMenu.js",["474","475","476","477","478","479","480","481","482","483","484","485","486","487","488","489","490"],"import React, {useState} from \"react\";\r\nimport '../../../css/home.css';\r\nimport {Button, Col, Label, Modal, ModalBody, ModalHeader, Row} from \"reactstrap\";\r\nimport {Control, Errors, Form} from \"react-redux-form\";\r\nimport {firebaseStorage} from \"../../../firebase/firebase\";\r\n\r\nconst CircleMenu = ({items, uploadProduct, uploadResource, uploadMiscellaneous}) => {\r\n    //const [image, setImage] = useState('');\r\n\r\n\r\n    // const [category] = useState('food');\r\n    // const [description] = useState('food');\r\n    // const [image] = useState('food');\r\n    // const [productName] = useState('food');\r\n    // const [soldPrice] = useState('food');\r\n    // const [categoryR] = useState('food');\r\n    // const [descriptionR] = useState('food');\r\n    // const [imageR] = useState('food');\r\n    // const [resourceName] = useState('food');\r\n    // const [initialQuantity] = useState('food');\r\n    // const [unitPrice] = useState('food');\r\n    // const [unit] = useState('food');\r\n\r\n\r\n    const required = (val) => val && val.length;\r\n    const maxLength = (len) => (val) => !(val) || (val.length <= len);\r\n    const minLength = (len) => (val) => (val) && (val.length >= len);\r\n    const isNumber = (val) => !isNaN(Number(val));\r\n    //const validEmail = (val) => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);  //regular expression\r\n\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const togglerModal = () => setIsModalOpen(!isModalOpen);\r\n\r\n    const [isModalOpenM, setIsModalOpenM] = useState(false);\r\n    const togglerModalM = () => setIsModalOpenM(!isModalOpenM);\r\n\r\n    const [isModalOpenR, setIsModalOpenR] = useState(false);\r\n    const togglerModalR = () => setIsModalOpenR(!isModalOpenR);\r\n\r\n\r\n    let handleProductSubmit = (values, event) => {\r\n        const file = values.image[0];\r\n\r\n        const fileName = file.name;\r\n        const fileExtension = fileName.split('.').pop();\r\n        alert(fileExtension);\r\n        const name = values.productName + '-' + (+new Date());\r\n        let ref = firebaseStorage.ref();\r\n        let imagePath = \"images/products/\" + name + '.' + fileExtension;\r\n        let fullRef = ref.child(imagePath);\r\n        const task = fullRef.put(file);\r\n        task.then((snapshot) => {\r\n            uploadProduct(values, imagePath);\r\n\r\n        });\r\n    };\r\n\r\n    let handleResourceSubmit = (values, event) => {\r\n        const file = values.image[0];\r\n\r\n        const fileName = file.name;\r\n        const fileExtension = fileName.split('.').pop();\r\n        const name = values.resourceName + '-' + (+new Date());\r\n        let ref = firebaseStorage.ref();\r\n        let imagePath = \"images/resources/\" + name + '.' + fileExtension;\r\n        let fullRef = ref.child(imagePath);\r\n        const task = fullRef.put(file);\r\n        task.then((snapshot) => {\r\n            uploadResource(values, imagePath);\r\n\r\n        });\r\n    };\r\n    let handleMiscellaneousSubmit = (values, event) => {\r\n        const file = values.proof[0];\r\n\r\n        const fileName = file.name;\r\n        const fileExtension = fileName.split('.').pop();\r\n        alert(fileExtension);\r\n        const name = values.reason + '-' + (+new Date());\r\n        let ref = firebaseStorage.ref();\r\n        let imagePath = \"images/miscellaneous/\" + name + '.' + fileExtension;\r\n        let fullRef = ref.child(imagePath);\r\n        const task = fullRef.put(file);\r\n        task.then((snapshot) => {\r\n            uploadMiscellaneous(values, imagePath);\r\n\r\n        });\r\n    };\r\n\r\n\r\n    return (\r\n        <div class=\"panel panel-default \">\r\n            <Modal isOpen={isModalOpen} toggle={togglerModal}>\r\n                <ModalHeader toggle={togglerModal}>Add New Product</ModalHeader>\r\n                <ModalBody>\r\n                    <Form model=\"addNewProduct\" onSubmit={handleProductSubmit} encType=\"multipart/form-data\">\r\n                        <Row className=\"form-group\">\r\n                            <Label htmlFor=\"productName\" md={2}> Product Name</Label>\r\n\r\n\r\n                            <Col md={10}>\r\n                                <Control.text model=\".productName\" id=\"productName\" name=\"productName\"\r\n                                              placeholder=\"Product Name\"\r\n                                              className=\"form-control\"\r\n                                              validators={{\r\n                                                  required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                              }}\r\n                                />\r\n                                <Errors\r\n                                    className=\"text-danger\"\r\n                                    model=\".productName\"\r\n                                    show=\"touched\"\r\n                                    messages={{\r\n                                        required: 'Required',\r\n                                        minLength: 'Must be greater than 2 characters',\r\n                                        maxLength: 'Must be 15 characters or less'\r\n                                    }}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"form-group\">\r\n                            <Label htmlFor=\"category\" md={2}> Category</Label>\r\n                            <Col md={10}>\r\n                                <Control.text model=\".category\" id=\"category\" name=\"category\"\r\n                                              placeholder=\"Category\"\r\n                                              className=\"form-control\"\r\n                                              validators={{\r\n                                                  required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                              }}\r\n                                />\r\n                                <Errors\r\n                                    className=\"text-danger\"\r\n                                    model=\".category\"\r\n                                    show=\"touched\"\r\n                                    messages={{\r\n                                        required: 'Required',\r\n                                        minLength: 'Must be greater than 2 characters',\r\n                                        maxLength: 'Must be 15 chatacters or less'\r\n                                    }}\r\n                                />\r\n\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"form-group\">\r\n                            <Label htmlFor=\"description\" md={2}> Description</Label>\r\n                            <Col md={10}>\r\n                                <Control.text model=\".description\" id=\"description\" name=\"description\"\r\n                                              placeholder=\"description\"\r\n                                              className=\"form-control\"\r\n                                              validators={{\r\n                                                  required, minLength: minLength(4), maxLength: maxLength(30)\r\n                                              }}\r\n                                />\r\n                                <Errors\r\n                                    className=\"text-danger\"\r\n                                    model=\".description\"\r\n                                    show=\"touched\"\r\n                                    messages={{\r\n                                        required: 'Required',\r\n                                        minLength: 'Must be greater than 4 characters',\r\n                                        maxLength: 'Must be 30 chatacters or less'\r\n                                    }}\r\n                                />\r\n\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"form-group\">\r\n                            <Label htmlFor=\"soldPrice\" md={2}> soldPrice</Label>\r\n                            <Col md={10}>\r\n                                <Control.text type=\"number\" model=\".soldPrice\" id=\"soldPrice\" name=\"soldPrice\"\r\n                                              placeholder=\"Sold Price\"\r\n                                              className=\"form-control\"\r\n                                              validators={{\r\n                                                  required,\r\n                                                  minLength: minLength(3),\r\n                                                  maxLength: maxLength(5),\r\n                                                  isNumber\r\n                                              }}\r\n                                />\r\n                                <Errors\r\n                                    className=\"text-danger\"\r\n                                    model=\".soldPrice\"\r\n                                    show=\"touched\"\r\n                                    messages={{\r\n                                        required: 'Required',\r\n                                        minLength: 'Must be greater than 2 numbers',\r\n                                        maxLength: 'Must be 5 numbers or less',\r\n                                        isNumber: 'Must be a number'\r\n                                    }}\r\n                                />\r\n\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"form-group\">\r\n                            <Label htmlFor=\"image\" md={2}> Image</Label>\r\n                            <Col md={10}>\r\n                                <Control.file model=\".image\" id=\"image\" name=\"image\"\r\n                                              placeholder=\"image\"\r\n                                              className=\"form-control\"\r\n                                              accept=\".png,.jpg,.webp,.jpeg,.gif,.dat\"\r\n                                    // validators={{\r\n                                    //     required, minLength: minLength(4), maxLength: maxLength(30)\r\n                                    // }}\r\n                                />\r\n                                {/*<Errors*/}\r\n                                {/*    className=\"text-danger\"*/}\r\n                                {/*    model=\".description\"*/}\r\n                                {/*    show=\"touched\"*/}\r\n                                {/*    messages={{*/}\r\n                                {/*        required: 'Required',*/}\r\n                                {/*        minLength: 'Must be greater than 4 characters',*/}\r\n                                {/*        maxLength: 'Must be 30 chatacters or less'*/}\r\n                                {/*    }}*/}\r\n                                {/*/>*/}\r\n\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        <Row className=\"form-group\">\r\n                            <Col md={{size: 10, offset: 2}}>\r\n                                <Button type=\"submit\" color=\"primary\">\r\n                                    Save\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </Form>\r\n                </ModalBody>\r\n            </Modal>\r\n\r\n            <Modal isOpen={isModalOpenR} toggle={togglerModalR}>\r\n                <ModalHeader toggle={togglerModalR}>Add New resources</ModalHeader>\r\n                <ModalBody>\r\n                    <Form model=\"addNewResource\" onSubmit={handleResourceSubmit} encType=\"multipart/form-data\">\r\n                        <Row className=\"form-group\">\r\n                            <Label htmlFor=\"resourceName\" md={2}> Resource Name</Label>\r\n                            <Col md={10}>\r\n                                <Control.text model=\".resourceName\" id=\"resourceName\" name=\"resourceName\"\r\n                                              placeholder=\"Resource Name\"\r\n                                              className=\"form-control\"\r\n                                              validators={{\r\n                                                  required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                              }}\r\n                                />\r\n                                <Errors\r\n                                    className=\"text-danger\"\r\n                                    model=\".resourceName\"\r\n                                    show=\"touched\"\r\n                                    messages={{\r\n                                        required: 'Required',\r\n                                        minLength: 'Must be greater than 2 characters',\r\n                                        maxLength: 'Must be 15 characters or less'\r\n                                    }}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"form-group\">\r\n                            <Label htmlFor=\"category\" md={2}> Category</Label>\r\n                            <Col md={10}>\r\n                                <Control.text model=\".category\" id=\"category\" name=\"category\"\r\n                                              placeholder=\"Category\"\r\n                                              className=\"form-control\"\r\n                                              validators={{\r\n                                                  required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                              }}\r\n                                />\r\n                                <Errors\r\n                                    className=\"text-danger\"\r\n                                    model=\".category\"\r\n                                    show=\"touched\"\r\n                                    messages={{\r\n                                        required: 'Required',\r\n                                        minLength: 'Must be greater than 2 characters',\r\n                                        maxLength: 'Must be 15 chatacters or less'\r\n                                    }}\r\n                                />\r\n\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"form-group\">\r\n                            <Label htmlFor=\"unit\" md={2}> Unit</Label>\r\n                            <Col md={10}>\r\n                                <Control.text model=\".unit\" id=\"unit\" name=\"unit\"\r\n                                              placeholder=\"Unit\"\r\n                                              className=\"form-control\"\r\n                                              validators={{\r\n                                                  required, minLength: minLength(1), maxLength: maxLength(4)\r\n                                              }}\r\n                                />\r\n                                <Errors\r\n                                    className=\"text-danger\"\r\n                                    model=\".unit\"\r\n                                    show=\"touched\"\r\n                                    messages={{\r\n                                        required: 'Required',\r\n                                        minLength: 'Must be greater than 1 characters',\r\n                                        maxLength: 'Must be 5 chatacters or less'\r\n                                    }}\r\n                                />\r\n\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"form-group\">\r\n                            <Label htmlFor=\"description\" md={2}> Description</Label>\r\n                            <Col md={10}>\r\n                                <Control.text model=\".description\" id=\"description\" name=\"description\"\r\n                                              placeholder=\"description\"\r\n                                              className=\"form-control\"\r\n                                              validators={{\r\n                                                  required, minLength: minLength(4), maxLength: maxLength(30)\r\n                                              }}\r\n                                />\r\n                                <Errors\r\n                                    className=\"text-danger\"\r\n                                    model=\".description\"\r\n                                    show=\"touched\"\r\n                                    messages={{\r\n                                        required: 'Required',\r\n                                        minLength: 'Must be greater than 4 characters',\r\n                                        maxLength: 'Must be 30 chatacters or less'\r\n                                    }}\r\n                                />\r\n\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"form-group\">\r\n                            <Label htmlFor=\"initialQuantity\" md={2}> Initial Quantity</Label>\r\n                            <Col md={10}>\r\n                                <Control.text type=\"number\" model=\".initialQuantity\" id=\"initialQuantity\"\r\n                                              name=\"initialQuantity\" placeholder=\"Initial Quantity\"\r\n                                              className=\"form-control\"\r\n                                              validators={{\r\n                                                  required,\r\n                                                  minLength: minLength(1),\r\n                                                  maxLength: maxLength(3),\r\n                                                  isNumber\r\n                                              }}\r\n                                />\r\n                                <Errors\r\n                                    className=\"text-danger\"\r\n                                    model=\".initialQuantity\"\r\n                                    show=\"touched\"\r\n                                    messages={{\r\n                                        required: 'Required',\r\n                                        minLength: 'Must be greater than 1 numbers',\r\n                                        maxLength: 'Must be 3 numbers or less',\r\n                                        isNumber: 'Must be a number'\r\n                                    }}\r\n                                />\r\n\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"form-group\">\r\n                            <Label htmlFor=\"unitPrice\" md={2}> Unit Price</Label>\r\n                            <Col md={10}>\r\n                                <Control.text type=\"number\" model=\".unitPrice\" id=\"unitPrice\" name=\"unitPrice\"\r\n                                              placeholder=\"Unit Price\"\r\n                                              className=\"form-control\"\r\n                                              validators={{\r\n                                                  required,\r\n                                                  minLength: minLength(3),\r\n                                                  maxLength: maxLength(5),\r\n                                                  isNumber\r\n                                              }}\r\n                                />\r\n                                <Errors\r\n                                    className=\"text-danger\"\r\n                                    model=\".unitPrice\"\r\n                                    show=\"touched\"\r\n                                    messages={{\r\n                                        required: 'Required',\r\n                                        minLength: 'Must be greater than 2 numbers',\r\n                                        maxLength: 'Must be 5 numbers or less',\r\n                                        isNumber: 'Must be a number'\r\n                                    }}\r\n                                />\r\n\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"form-group\">\r\n                            <Label htmlFor=\"image\" md={2}> Image</Label>\r\n                            <Col md={10}>\r\n                                <Control.file model=\".image\" id=\"image\" name=\"image\"\r\n                                              placeholder=\"image\"\r\n                                              className=\"form-control\"\r\n                                    // validators={{\r\n                                    //     required, minLength: minLength(4), maxLength: maxLength(30)\r\n                                    // }}\r\n                                />\r\n                                {/*<Errors*/}\r\n                                {/*    className=\"text-danger\"*/}\r\n                                {/*    model=\".image\"*/}\r\n                                {/*    show=\"touched\"*/}\r\n                                {/*    messages={{*/}\r\n                                {/*        required: 'Required',*/}\r\n                                {/*        minLength: 'Must be greater than 4 characters',*/}\r\n                                {/*        maxLength: 'Must be 30 chatacters or less'*/}\r\n                                {/*    }}*/}\r\n                                {/*/>*/}\r\n\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        <Row className=\"form-group\">\r\n                            <Col md={{size: 10, offset: 2}}>\r\n                                <Button type=\"submit\" color=\"primary\">\r\n                                    Save\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </Form>\r\n                </ModalBody>\r\n            </Modal>\r\n\r\n\r\n            <Modal isOpen={isModalOpenM} toggle={togglerModalM}>\r\n                <ModalHeader toggle={togglerModalM}>Add Miscellaneous</ModalHeader>\r\n                <ModalBody>\r\n                    <Form model=\"addMiscellaneous\" onSubmit={handleMiscellaneousSubmit} encType=\"multipart/form-data\">\r\n                        <Row className=\"form-group\">\r\n                            <Label htmlFor=\"reason\" md={2}> Reason</Label>\r\n\r\n\r\n                            <Col md={10}>\r\n                                <Control.text model=\".reason\" id=\"reason\" name=\"reason\"\r\n                                              placeholder=\"reason\"\r\n                                              className=\"form-control\"\r\n                                              validators={{\r\n                                                  required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                              }}\r\n                                />\r\n                                <Errors\r\n                                    className=\"text-danger\"\r\n                                    model=\".reason\"\r\n                                    show=\"touched\"\r\n                                    messages={{\r\n                                        required: 'Required',\r\n                                        minLength: 'Must be greater than 2 characters',\r\n                                        maxLength: 'Must be 15 characters or less'\r\n                                    }}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"form-group\">\r\n                            <Label htmlFor=\"by\" md={2}> Category</Label>\r\n                            <Col md={10}>\r\n                                <Control.text model=\".by\" id=\"by\" name=\"by\"\r\n                                              placeholder=\"by\"\r\n                                              className=\"form-control\"\r\n                                              validators={{\r\n                                                  required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                              }}\r\n                                />\r\n                                <Errors\r\n                                    className=\"text-danger\"\r\n                                    model=\".by\"\r\n                                    show=\"touched\"\r\n                                    messages={{\r\n                                        required: 'Required',\r\n                                        minLength: 'Must be greater than 2 characters',\r\n                                        maxLength: 'Must be 15 chatacters or less'\r\n                                    }}\r\n                                />\r\n\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"form-group\">\r\n                            <Label htmlFor=\"description\" md={2}> Description</Label>\r\n                            <Col md={10}>\r\n                                <Control.text model=\".description\" id=\"description\" name=\"description\"\r\n                                              placeholder=\"description\"\r\n                                              className=\"form-control\"\r\n                                              validators={{\r\n                                                  required, minLength: minLength(4), maxLength: maxLength(30)\r\n                                              }}\r\n                                />\r\n                                <Errors\r\n                                    className=\"text-danger\"\r\n                                    model=\".description\"\r\n                                    show=\"touched\"\r\n                                    messages={{\r\n                                        required: 'Required',\r\n                                        minLength: 'Must be greater than 4 characters',\r\n                                        maxLength: 'Must be 30 chatacters or less'\r\n                                    }}\r\n                                />\r\n\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"form-group\">\r\n                            <Label htmlFor=\"price\" md={2}> Price</Label>\r\n                            <Col md={10}>\r\n                                <Control.text type=\"number\" model=\".price\" id=\"price\" name=\"price\"\r\n                                              placeholder=\"how much?\"\r\n                                              className=\"form-control\"\r\n                                              validators={{\r\n                                                  required,\r\n                                                  minLength: minLength(2),\r\n                                                  maxLength: maxLength(5),\r\n                                                  isNumber\r\n                                              }}\r\n                                />\r\n                                <Errors\r\n                                    className=\"text-danger\"\r\n                                    model=\".price\"\r\n                                    show=\"touched\"\r\n                                    messages={{\r\n                                        required: 'Required',\r\n                                        minLength: 'Must be greater than 2 numbers',\r\n                                        maxLength: 'Must be 5 numbers or less',\r\n                                        isNumber: 'Must be a number'\r\n                                    }}\r\n                                />\r\n\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"form-group\">\r\n                            <Label htmlFor=\"proof\" md={2}> proof</Label>\r\n                            <Col md={10}>\r\n                                <Control.file model=\".proof\" id=\"proof\" name=\"proof\"\r\n                                              placeholder=\"proof\"\r\n                                              className=\"form-control\"\r\n                                    // validators={{\r\n                                    //     required, minLength: minLength(4), maxLength: maxLength(30)\r\n                                    // }}\r\n                                />\r\n                                {/*<Errors*/}\r\n                                {/*    className=\"text-danger\"*/}\r\n                                {/*    model=\".description\"*/}\r\n                                {/*    show=\"touched\"*/}\r\n                                {/*    messages={{*/}\r\n                                {/*        required: 'Required',*/}\r\n                                {/*        minLength: 'Must be greater than 4 characters',*/}\r\n                                {/*        maxLength: 'Must be 30 chatacters or less'*/}\r\n                                {/*    }}*/}\r\n                                {/*/>*/}\r\n\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        <Row className=\"form-group\">\r\n                            <Col md={{size: 10, offset: 2}}>\r\n                                <Button type=\"submit\" color=\"primary\">\r\n                                    Save\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </Form>\r\n                </ModalBody>\r\n            </Modal>\r\n            <div class=\"panel-heading\">\r\n\r\n            </div>\r\n\r\n            <div class=\"row panel-body \">\r\n\r\n                <div className=\"col \">\r\n                    <div className=\"\">\r\n                        <button onClick={togglerModal} type=\"button\" className=\"btn-warning btn btn-circle btn-xl \"><i\r\n                            className=\"fa fa-plus\"></i>\r\n                        </button>\r\n                        <span className=\"row\"> Add new Product </span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col \">\r\n                    <div className=\"\">\r\n                        <button onClick={togglerModalR} type=\"button\" className=\"btn-primary btn btn-circle btn-xl \"><i\r\n                            className=\"fa fa-plus\"></i>\r\n                        </button>\r\n                        <span className=\"row\"> Add new Resources </span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"col \">\r\n                    <div className=\"\">\r\n                        <button onClick={togglerModalM} type=\"button\" className=\"btn-primary btn btn-circle btn-xl \"><i\r\n                            className=\"fa fa-money\"></i>\r\n                        </button>\r\n                        <span className=\"row\"> Add other expenses </span>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                {/*<div class=\"col \">*/}\r\n                {/*    <button type=\"button\" class=\"btn btn-success btn-circle btn-xl\"><i class=\"fa fa-plus\"></i>*/}\r\n                {/*    </button>*/}\r\n                {/*    <span class=\"row\"> Add Product </span>*/}\r\n                {/*</div>*/}\r\n\r\n                {/*<div class=\"col \">*/}\r\n                {/*    <button type=\"button\" class=\"btn btn-primary btn-circle btn-xl\"><i class=\"fa fa-pencil\"></i>*/}\r\n                {/*    </button>*/}\r\n                {/*    <span class=\"row\"> Edit Product </span>*/}\r\n                {/*</div>*/}\r\n                {/*<div class=\"col \">*/}\r\n                {/*    <button type=\"button\" class=\"btn btn-danger btn-circle btn-xl\"><i class=\"fa fa-trash\"></i>*/}\r\n                {/*    </button>*/}\r\n                {/*    <span class=\"row\"> Delete Product </span>*/}\r\n                {/*</div>*/}\r\n\r\n                {/*<div class=\"col \">*/}\r\n                {/*    <button type=\"button\" class=\"btn btn-warning btn-circle btn-xl\"><i class=\"fa fa-tasks\"></i>*/}\r\n                {/*    </button>*/}\r\n                {/*    <span class=\"row\"> Stock Manager </span>*/}\r\n                {/*</div>*/}\r\n\r\n                {/*\r\n                <button type=\"button\" class=\"btn btn-primary btn-circle btn-xl\"><i class=\"fa fa-list\"></i>\r\n                </button>\r\n                <button type=\"button\" class=\"btn btn-success btn-circle btn-xl\"><i class=\"fa fa-link\"></i>\r\n                </button>\r\n                <button type=\"button\" class=\"btn btn-info btn-circle btn-xl\"><i class=\"fa fa-check\"></i>\r\n                </button>\r\n                <button type=\"button\" class=\"btn btn-warning btn-circle btn-xl\"><i class=\"fa fa-times\"></i>\r\n                </button>\r\n                <button type=\"button\" class=\"btn btn-danger btn-circle btn-xl\"><i class=\"fa fa-heart\"></i>\r\n                </button> */}\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CircleMenu;","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Receptions\\UIcomponents\\ScrollView.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\SignUp.js",["491","492","493","494","495","496","497"],"import React, {Component} from 'react';\r\nimport {Button, Col, Label, Row} from \"reactstrap\";\r\nimport {Control, Errors, Form} from \"react-redux-form\";\r\n\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => (val) && (val.length >= len);\r\nconst isNumber = (val) => !isNaN(Number(val));\r\nconst validEmail = (val) => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);  //regular expression\r\n\r\n\r\nclass SignUp extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n\r\n    handleSubmit(values) {\r\n        this.props.signUp(values, 'client');\r\n\r\n        // this.props.postFeedback(values.firstname, values.lastname, values.email, values.contactType, values.telnum, values.agree);\r\n\r\n        console.log(\"Curent state is: \" + JSON.stringify(values));\r\n\r\n        // this.props.resetFeedbackForm();\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"d-flex justify-content-center\">\r\n                <div className=\"bg-light shadow-lg mt-5 mb-5 \">\r\n\r\n\r\n                    <div className=\"p-5\">\r\n                        <div className=\"\">\r\n                            <Form model=\"signUp\" onSubmit={(values) => this.handleSubmit(values)}>\r\n                                <Row className=\"form-group\">\r\n                                    <Label htmlFor=\"firstname\" md={2}> First Name</Label>\r\n                                    <Col md={10}>\r\n                                        <Control.text model=\".firstname\" id=\"firstname\" name=\"firstname\"\r\n                                                      placeholder=\"First Name\"\r\n                                                      className=\"form-control\"\r\n                                                      validators={{\r\n                                                          required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                                      }}\r\n                                        />\r\n                                        <Errors\r\n                                            className=\"text-danger\"\r\n                                            model=\".firstname\"\r\n                                            show=\"touched\"\r\n                                            messages={{\r\n                                                required: 'Required',\r\n                                                minLength: 'Must be greater than 2 characters',\r\n                                                maxLength: 'Must be 15 chatacters or less'\r\n                                            }}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row className=\"form-group\">\r\n                                    <Label htmlFor=\"lastname\" md={2}> Last Name</Label>\r\n                                    <Col md={10}>\r\n                                        <Control.text model=\".lastname\" id=\"lastname\" name=\"lastname\"\r\n                                                      placeholder=\"Last Name\"\r\n                                                      className=\"form-control\"\r\n                                                      validators={{\r\n                                                          required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                                      }}\r\n                                        />\r\n                                        <Errors\r\n                                            className=\"text-danger\"\r\n                                            model=\".lastname\"\r\n                                            show=\"touched\"\r\n                                            messages={{\r\n                                                required: 'Required',\r\n                                                minLength: 'Must be greater than 2 characters',\r\n                                                maxLength: 'Must be 15 chatacters or less'\r\n                                            }}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row className=\"form-group\">\r\n                                    <Label htmlFor=\"telnum\" md={2}> Contact Tel</Label>\r\n                                    <Col md={10}>\r\n                                        <Control.text model=\".telnum\" id=\"telnum\" name=\"telnum\"\r\n                                                      placeholder=\"Tel. Number\"\r\n                                                      className=\"form-control\"\r\n                                                      validators={{\r\n                                                          required,\r\n                                                          minLength: minLength(3),\r\n                                                          maxLength: maxLength(15),\r\n                                                          isNumber\r\n                                                      }}\r\n                                        />\r\n                                        <Errors\r\n                                            className=\"text-danger\"\r\n                                            model=\".telnum\"\r\n                                            show=\"touched\"\r\n                                            messages={{\r\n                                                required: 'Required',\r\n                                                minLength: 'Must be greater than 2 numbers',\r\n                                                maxLength: 'Must be 15 numbers or less',\r\n                                                isNumber: 'Must be a number'\r\n                                            }}\r\n                                        />\r\n\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <Row className=\"form-group\">\r\n                                    <Label htmlFor=\"email\" md={2}> Email </Label>\r\n                                    <Col md={10}>\r\n                                        <Control.text model=\".email\" id=\"email\" name=\"email\" placeholder=\"Email\"\r\n                                                      className=\"form-control\"\r\n                                                      validators={{\r\n                                                          required, validEmail\r\n                                                      }}\r\n                                        />\r\n                                        <Errors\r\n                                            className=\"text-danger\"\r\n                                            model=\".email\"\r\n                                            show=\"touched\"\r\n                                            messages={{\r\n                                                required: 'Required',\r\n                                                validEmail: 'Invalid Email address'\r\n                                            }}\r\n                                        />\r\n\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row className=\"form-group\">\r\n                                    <Label htmlFor=\"password\" md={2}> Password</Label>\r\n                                    <Col md={10}>\r\n                                        <Control.password model=\".password\" id=\"password\" name=\"password\"\r\n                                                          placeholder=\"Password\"\r\n                                                          className=\"form-control\"\r\n                                                          validators={{\r\n                                                              required,\r\n                                                              minLength: minLength(3),\r\n                                                              maxLength: maxLength(15)\r\n                                                          }}\r\n                                        />\r\n                                        <Errors\r\n                                            className=\"text-danger\"\r\n                                            model=\".password\"\r\n                                            show=\"touched\"\r\n                                            messages={{\r\n                                                required: 'Required',\r\n                                                minLength: 'Must be greater than 2 characters',\r\n                                                maxLength: 'Must be 15 chatacters or less'\r\n                                            }}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row className=\"form-group\">\r\n                                    <Label htmlFor=\"confirmPassword\" md={2}> Password</Label>\r\n                                    <Col md={10}>\r\n                                        <Control.password model=\".confirmPassword\" id=\"confirmPassword\"\r\n                                                          name=\"confirmPassword\" placeholder=\"Confirm Password\"\r\n                                                          className=\"form-control\"\r\n                                                          validators={{\r\n                                                              required,\r\n                                                              minLength: minLength(3),\r\n                                                              maxLength: maxLength(15)\r\n                                                          }}\r\n                                        />\r\n                                        <Errors\r\n                                            className=\"text-danger\"\r\n                                            model=\".confirmPassword\"\r\n                                            show=\"touched\"\r\n                                            messages={{\r\n                                                required: 'Required',\r\n                                                minLength: 'Must be greater than 2 characters',\r\n                                                maxLength: 'Must be 15 chatacters or less'\r\n                                            }}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row className=\"form-group\">\r\n                                    <Col md={{size: 10, offset: 2}}>\r\n                                        <div className=\"form-check\">\r\n                                            <Control.checkbox model=\".agree\" name=\"agree\"\r\n                                                              className=\"form-check-input\"/> {' '}\r\n                                            <strong>Remember password? </strong>\r\n\r\n                                        </div>\r\n                                    </Col>\r\n\r\n                                </Row>\r\n\r\n                                <Row className=\"form-group\">\r\n                                    <Col md={{size: 7, offset: 5}}>\r\n                                        <Button type=\"submit\" color=\"primary\">\r\n                                            Sign Up\r\n                                        </Button>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Form>\r\n                        </div>\r\n                        <div className=\"col-12 col-md-3\"></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SignUp;","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\cartComponent\\AddedCart.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\cartComponent\\TableAddedCarts.js",[],["498","499"],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\Cart.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Receptions\\UIcomponents\\TabsMenu.js",["500","501","502"],"import React, {useState} from 'react';\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardBody,\r\n    CardText,\r\n    CardTitle,\r\n    Col,\r\n    Nav,\r\n    NavItem,\r\n    NavLink,\r\n    Row,\r\n    TabContent,\r\n    TabPane\r\n} from 'reactstrap';\r\nimport classnames from 'classnames';\r\nimport TableAddedCarts from '../../cartComponent/TableAddedCarts'\r\nimport AddedCarts from '../../cartComponent/AddedCart';\r\nimport '../../../css/home.css';\r\nimport FilterMenu from './FilterMenu';\r\nimport {Sticky, StickyContainer} from 'react-sticky'\r\n\r\n\r\nimport ScrollView from './ScrollView';\r\nimport RenderCard3 from \"../../homepagecomponents/RenderCard3\";\r\nimport NonPaidInvoicesComponent from \"./NonPaidInvoicesComponent\";\r\n\r\nlet numberOfItem = 12;\r\nconst TabsMenu = (props) => {\r\n\r\n\r\n\r\n    let opElement = props.products.products.slice(0, numberOfItem);\r\n    let menu = opElement.map((product) => {\r\n        return (\r\n            <div className=\"\">\r\n                <RenderCard3 item={product}\r\n                             key={product.id}\r\n                             cart={props.cart}\r\n                             addToCart={props.addToCart}\r\n                             removeToCart={props.removeToCart}\r\n\r\n                />\r\n            </div>\r\n        );\r\n    });\r\n    const arr = [\r\n        ...menu\r\n    ];\r\n\r\n\r\n    const [activeTab, setActiveTab] = useState(localStorage.getItem('activeTab1')===null? '1': localStorage.getItem('activeTab1'));\r\n    const [productToDisplay, setProductToDisplay] = useState(props.products.products);\r\n    const [category, setCategory] = useState('All');\r\n\r\n\r\n    const [hasMoreS, setHasMoreS] = useState(true);\r\n    const [itemToFetch, setItemToFetch] = useState(numberOfItem);\r\n    const [itemToStartOn, setItemToStartOn] = useState(numberOfItem);\r\n    const [items2, setItems2] = useState(arr);\r\n\r\n\r\n\r\n\r\n    const toggle = tab => {\r\n        if (activeTab !== tab) setActiveTab(tab);\r\n        localStorage.setItem('activeTab1',tab);\r\n    }\r\n\r\n\r\n    let handleReportsClick = () =>{\r\n        props.changeNonPaidInvoices(JSON.parse(localStorage.getItem('userCollection')).firstName);\r\n    }\r\n    let keysToUse = props.products.products.reduce(\r\n        (keysToUse, pr) => {\r\n            if (!keysToUse.includes(pr.category)) {\r\n                keysToUse = [...keysToUse, pr.category];\r\n            }\r\n\r\n            return keysToUse;\r\n\r\n        }, []\r\n    );\r\n    let funMenu = (products = productToDisplay, reset = false) => {\r\n        let start;\r\n        if (!reset) {\r\n            start = itemToStartOn;\r\n        } else {\r\n            start = 0;\r\n        }\r\n\r\n        let last = start + itemToFetch;\r\n\r\n\r\n        let lastIndex = (products.length < last) ? products.length : last;\r\n        if (products.length >= lastIndex) {\r\n\r\n            let opElement = products.slice(start, lastIndex);\r\n            // this.setState({\r\n            //     itemToStartOn:lastIndex\r\n            // }\r\n            //\r\n            //\r\n            // )\r\n            setItemToStartOn(lastIndex);\r\n            let menu = opElement.map((product) => {\r\n                return (\r\n                    <div className=\"\">\r\n                        <RenderCard3 key={product.id + \"op\"} cart={props.cart} addToCart={props.addToCart}\r\n                                     removeToCart={props.removeToCart} item={product}/>\r\n                    </div>\r\n                );\r\n            });\r\n            if (products.length === lastIndex) {\r\n                // this.setState({hasMoreS: false});\r\n                setHasMoreS(false);\r\n            }\r\n            return menu;\r\n        } else {\r\n            // this.setState({hasMores:false});\r\n            setHasMoreS(false);\r\n            return [];\r\n\r\n        }\r\n\r\n    }\r\n    let changeProductToDisplay = (newCategory = 'All') => {\r\n        let items = undefined;\r\n        if (newCategory === 'All') {\r\n            items = props.products.products;\r\n        } else {\r\n            items = props.products.products.reduce(\r\n                (item, pr) => {\r\n                    if (pr.category == newCategory) {\r\n                        item = [...item, pr];\r\n                    }\r\n\r\n                    return item;\r\n\r\n                }, []\r\n            );\r\n\r\n        }\r\n        setProductToDisplay(items);\r\n\r\n        setItemToStartOn(0);\r\n        let newItem = [...funMenu(items, true)]\r\n        setItems2(newItem);\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Nav tabs>\r\n                <NavItem>\r\n                    <NavLink\r\n                        className={classnames({active: activeTab === '1'})}\r\n                        onClick={() => {\r\n                            toggle('1');\r\n                        }}\r\n                    >\r\n                        Products\r\n                    </NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                    <NavLink\r\n                        className={classnames({active: activeTab === '2'})}\r\n                        onClick={() => {\r\n                            toggle('2');\r\n                        }}\r\n                    >\r\n                        <span onClick={handleReportsClick}>Reports</span>\r\n\r\n                    </NavLink>\r\n                </NavItem>\r\n            </Nav>\r\n            <TabContent activeTab={activeTab}>\r\n                <TabPane tabId=\"1\">\r\n                    <Row>\r\n\r\n                        <Col sm=\"8\">\r\n\r\n                            <StickyContainer>\r\n\r\n                                <Sticky>\r\n                                    {({\r\n                                          style,\r\n\r\n\r\n                                          isSticky,\r\n                                          wasSticky,\r\n                                          distanceFromTop,\r\n                                          distanceFromBottom,\r\n                                          calculatedHeight\r\n                                      }) => (\r\n                                        <header style={style}>\r\n                                            {<FilterMenu categories={keysToUse}\r\n                                                         category={category}\r\n                                                         changeProductToDisplay={changeProductToDisplay}\r\n                                                         setCategory={setCategory}/>\r\n\r\n                                            }\r\n                                        </header>\r\n                                    )}\r\n\r\n\r\n                                </Sticky>\r\n                                <ScrollView\r\n                                    funMenu={funMenu}\r\n                                    items2={items2} setItems2={setItems2}\r\n                                    hasMoreS={hasMoreS} setHasMoreS={setHasMoreS}\r\n                                    itemToFetch={itemToFetch} setItemToFetch={setItemToFetch}\r\n                                    itemToStartOn={itemToStartOn} setItemToStartOn={setItemToStartOn}\r\n                                    cart={props.cart}\r\n                                    addToCart={props.addToCart}\r\n                                    removeToCart={props.removeToCart}\r\n                                    products={productToDisplay}/>\r\n\r\n                            </StickyContainer>\r\n\r\n\r\n                        </Col>\r\n\r\n                        <Col sm=\"4\">\r\n                            <Card className=\"mt-2\">\r\n                                <CardTitle className=\"mt-1 col\">\r\n                                    <h3> Products on Cart <span class=\"float-right \"><AddedCarts\r\n                                        cart={props.cart}/> </span>\r\n                                        <span class=\"fa fa-print mt-2 float-right\"> </span>\r\n                                    </h3>\r\n                                </CardTitle>\r\n                                <CardBody> <TableAddedCarts pushInvoice={props.pushInvoice}\r\n                                                            waiters={props.waiters.waiters}\r\n                                                            removeToCart={props.removeToCart} cart={props.cart}/>\r\n                                </CardBody>\r\n                            </Card>\r\n\r\n\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n\r\n                        </Col>\r\n                    </Row>\r\n                </TabPane>\r\n                <TabPane tabId=\"2\">\r\n                    <Row>\r\n                        <Col>\r\n                            <NonPaidInvoicesComponent changeNonPaidInvoices={props.changeNonPaidInvoices} nonPaidInvoices={props.nonPaidInvoices} />\r\n                        </Col>\r\n                    </Row>\r\n                </TabPane>\r\n            </TabContent>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TabsMenu;\r\n","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\homepagecomponents\\RenderCard3.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Receptions\\UIcomponents\\PaginationComponent.js",["503"],"import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport PaginationComponent from \"react-reactstrap-pagination\";\r\n\r\n\r\nclass PageComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selectedPage: 1\r\n        };\r\n\r\n        this.handleSelected = this.handleSelected.bind(this);\r\n    }\r\n\r\n    handleSelected(selectedPage) {\r\n        console.log(\"selected\", selectedPage);\r\n        this.setState({selectedPage: selectedPage});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container-fluid mt-2\">\r\n\r\n                <PaginationComponent\r\n                    totalItems={50}\r\n                    pageSize={3}\r\n                    onSelect={this.handleSelected}\r\n                />\r\n                <h3>Reacstrap Pagination Component</h3>\r\n                <hr/>\r\n                <h5>Selected page: {this.state.selectedPage}</h5>\r\n                <hr/>\r\n                <h5>Default maxPaginationNumbers (5)</h5>\r\n                {/* <h5>Specific maxPaginationNumbers (9) defaultActivePage (10)</h5>\r\n        <PaginationComponent\r\n          totalItems={50}\r\n          pageSize={3}\r\n          onSelect={this.handleSelected}\r\n          maxPaginationNumbers={9}\r\n          defaultActivePage={10}\r\n        />\r\n\r\n        <h5>Size lg</h5>\r\n        <PaginationComponent\r\n          size=\"lg\"\r\n          totalItems={30}\r\n          pageSize={5}\r\n          onSelect={this.handleSelected}\r\n        />\r\n\r\n        <h5>Size sm</h5>\r\n        <PaginationComponent\r\n          size=\"sm\"\r\n          totalItems={30}\r\n          pageSize={5}\r\n          onSelect={this.handleSelected}\r\n        /> */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PageComponent;",["504","505"],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Manager\\Main.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Manager\\UIcomponents\\SideNavigation.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\homepagecomponents\\GoogleMap.js",["506"],"import React from 'react'\r\nimport {GoogleMap, useJsApiLoader} from '@react-google-maps/api';\r\n\r\nconst containerStyle = {\r\n    width: '400px',\r\n    height: '400px'\r\n};\r\n\r\nconst center = {\r\n    lat: -3.745,\r\n    lng: -38.523\r\n};\r\n\r\nfunction GoogleMapExample() {\r\n    const {isLoaded} = useJsApiLoader({\r\n        id: 'google-map-script',\r\n        googleMapsApiKey: \"AIzaSyARqGl76OBuKJuriRHa9kX3kxGlAZkNfwU\"\r\n    })\r\n\r\n    const [map, setMap] = React.useState(null)\r\n\r\n    const onLoad = React.useCallback(function callback(map) {\r\n        const bounds = new window.google.maps.LatLngBounds();\r\n        map.fitBounds(bounds);\r\n        setMap(map)\r\n    }, [])\r\n\r\n    const onUnmount = React.useCallback(function callback(map) {\r\n        setMap(null)\r\n    }, [])\r\n\r\n    return isLoaded ? (\r\n\r\n        <GoogleMap\r\n            mapContainerStyle={containerStyle}\r\n            center={center}\r\n            zoom={10}\r\n            onLoad={onLoad}\r\n            onUnmount={onUnmount}\r\n        >\r\n            { /* Child components, such as markers, info windows, etc. */}\r\n            <></>\r\n        </GoogleMap>\r\n    ) : <></>\r\n}\r\n\r\nexport default React.memo(GoogleMapExample)",["507","508"],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Receptions\\AllProducts.js",["509","510","511","512","513","514","515","516"],"import React, {useState} from 'react';\r\nimport {TabContent, TabPane, Nav, NavItem, NavLink, Card, Button, CardTitle, CardText, Row, Col} from 'reactstrap';\r\nimport classnames from 'classnames';\r\nimport {ITEMS} from '../../shared/ProductsCategories'\r\nimport FlippingCard from \"../Manager/FlippingCard\";\r\nimport {Loading} from \"../LoadingComponent\";\r\nimport RenderCard3 from \"../homepagecomponents/RenderCard3\";\r\nimport ScrollView from \"./UIcomponents/ScrollView\";\r\n\r\n\r\nconst AllProducts = (props) => {\r\n\r\n    const [activeTab, setActiveTab] = useState('mains');\r\n    // const[cathegories,setCAthegories] = useState(ITEMS);\r\n    if (props.isLoading) {\r\n        return (\r\n            <Loading/>\r\n        );\r\n    } else if (props.errMess) {\r\n        return (\r\n            <h4> {props.errMess} </h4>\r\n        );\r\n    } else {\r\n        let keysToUse = props.allProducts.reduce(\r\n            (keysToUse, pr) => {\r\n                if (!keysToUse.includes(pr.category)) {\r\n                    keysToUse = [...keysToUse, pr.category];\r\n                }\r\n\r\n                return keysToUse;\r\n\r\n            }, []\r\n        )\r\n\r\n        let arry = {\r\n            All: []\r\n        }\r\n        for (let i = 0; i < keysToUse.length; i++) {\r\n            arry[keysToUse[i]] = [];\r\n        }\r\n\r\n\r\n        const arr = props.allProducts.reduce(\r\n            (arrayOfItems, productT) => {\r\n                arrayOfItems[productT.category] = [...arrayOfItems[productT.category],\r\n                    productT];\r\n                return arrayOfItems;\r\n            }, arry\r\n        )\r\n\r\n\r\n        const toggle = tab => {\r\n            if (activeTab !== tab) setActiveTab(tab);\r\n        }\r\n\r\n\r\n        let allNavItemNew = keysToUse.map(cathegory => {\r\n            return (\r\n                <NavItem>\r\n                    <NavLink\r\n                        className={classnames({active: activeTab === cathegory})}\r\n                        onClick={() => {\r\n                            toggle(cathegory);\r\n                        }}\r\n                    >\r\n                        {cathegory}\r\n                    </NavLink>\r\n                </NavItem>\r\n            )\r\n        })\r\n\r\n        let allTabPane = keysToUse.map(key => {\r\n            return (\r\n                <TabPane tabId={key}>\r\n                    <Row>\r\n\r\n                        <ScrollView\r\n                            cart={props.cart}\r\n                            addToCart={props.addToCart}\r\n                            removeToCart={props.removeToCart}\r\n                            products={arr[key]}/>\r\n\r\n                    </Row>\r\n                </TabPane>\r\n            )\r\n        })\r\n        return (\r\n            <div>\r\n                <Nav pills>\r\n                    {allNavItemNew}\r\n                </Nav>\r\n                <TabContent activeTab={activeTab}>\r\n                    {allTabPane}\r\n                </TabContent>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default AllProducts;",["517","518"],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Receptions\\WaiterCategoryButton.js",["519"],"import {Button} from \"reactstrap\";\r\nimport React, {useState} from \"react\";\r\n\r\nlet WaiterCategoryButton = (props) => {\r\n    const [category, setCategory] = useState(props.category);\r\n    let handleClick = (event) => {\r\n        props.changeProductToDisplay(category);\r\n        event.preventDefault();\r\n    }\r\n    return (\r\n        <Button key={props.category}\r\n                id={props.category}\r\n                onClick={handleClick}\r\n                className=\"color3\"> <i class=\"fa fa-beer text-white\" aria-hidden=\"true\"> {category}</i></Button>\r\n    )\r\n}\r\nexport default WaiterCategoryButton;","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Receptions\\UIcomponents\\ComponentToPrint.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Manager\\Products\\HorizontalOutOfStock.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Manager\\Products\\IncreaseProduct.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Manager\\Products\\StockManagement.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Manager\\Products\\MarchProductToResources.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Manager\\marching\\MarchProductsCard.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Manager\\ModalTogglerButton.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Manager\\Reports\\Dashboard.js",["520"],"import React from 'react';\r\nimport DairyUsage from './DairyUsage';\r\nimport ItemsSold from '../UIcomponents/ItemsSold';\r\nimport ReactDatePicker from '../UIcomponents/ReactDatePicker';\r\nimport ProductSold from \"./ProductSold\";\r\nimport DailyInvoicesComponent from \"./DailyInvoicesComponent\";\r\nimport DailyStockUp from \"./DailyStockUp\";\r\nimport DailyMiscellaneousComponent from \"./DailyMiscellaneousComponent\";\r\nimport DailyResourcesReportsComponent from \"./DailyResourcesReportsComponent\";\r\n\r\nconst Dashboard = (props) => {\r\n    let dailyTotals = [{\r\n        icon:\"fa fa-shopping-cart\",\r\n        name:\"Sold\",\r\n        color:'badge-warning',\r\n        unit:\"Products\",\r\n        value:props.otherDailyReports.totalQuantity===null ? \"--\": props.otherDailyReports.totalQuantity\r\n    },{\r\n        icon:\"fa fa-dollar\",\r\n        name:\"Earning\",\r\n        unit: 'rwf',\r\n        color:'',\r\n        value:props.otherDailyReports.totalEarn===null ? \"--\": props.otherDailyReports.totalEarn\r\n    },{\r\n        icon:\"fa fa-dollar\",\r\n        name:\"Orders\",\r\n        unit: 'Invoices',\r\n        color:'',\r\n        value:props.otherDailyReports.totalInvoices===null ? \"--\": props.otherDailyReports.totalInvoices\r\n    },\r\n        {\r\n            icon:\"fa fa-dollar\",\r\n            name:\"Stock up\",\r\n            unit: 'rwf',\r\n            color:'badge-primary',\r\n            value:props.otherDailyReports.totalStockUpMoney===null ? \"--\": props.otherDailyReports.totalStockUpMoney\r\n        },\r\n        {\r\n            icon:\"fa fa-dollar\",\r\n            name:\"Expanses \",\r\n            unit: 'rwf',\r\n            color:'badge-danger',\r\n            value:props.otherDailyReports.totalMiscellaneousMoney===null ? \"--\": props.otherDailyReports.totalMiscellaneousMoney\r\n        },\r\n        {\r\n            icon:\"fa fa-dollar\",\r\n            name:\"Stock out \",\r\n            unit: 'rwf',\r\n            color:'badge-warning',\r\n            value:props.otherDailyReports.totalStockOutMoney===null ? \"--\": props.otherDailyReports.totalStockOutMoney\r\n        }\r\n    ];\r\n\r\n\r\n\r\n    // let popularProductCalc = () =>{\r\n    //     let popularProduct = {\r\n    //         totalPrice:0,\r\n    //         totalQuantity: 0,\r\n    //         productName:''\r\n    //     };\r\n    //     if(props.dailyInvoiceDetails === null || props.dailyInvoiceDetails){\r\n    //         return;\r\n    //     }\r\n    //     else if(props.dailyInvoiceDetails.dailyInvoiceDetails === null || props.dailyInvoiceDetails.dailyInvoiceDetails){\r\n    //         return;\r\n    //     }\r\n    //     let products = props.dailyInvoiceDetails.products;\r\n    //      if(products === undefined || products ===null){\r\n    //         return\r\n    //     }\r\n    //     products.forEach((product) => {\r\n    //\r\n    //         let receptionist = Object.keys(props.dailyInvoices.dailyInvoices[product]);\r\n    //         let totalPrice = 0;\r\n    //         let totalQuantity = 0;\r\n    //         receptionist.forEach((rec) => {\r\n    //             totalPrice += parseInt(props.dailyInvoices.dailyInvoices[product][rec].totalPrice);\r\n    //             totalQuantity += parseInt(props.dailyInvoices.dailyInvoices[product][rec].totalQuantity);\r\n    //             if( popularProduct.totalQuantity <= totalQuantity){\r\n    //                 popularProduct.totalQuantity = totalQuantity;\r\n    //                 popularProduct.totalPrice = totalPrice;\r\n    //                 popularProduct.productName = product;\r\n    //             }\r\n    //\r\n    //\r\n    //         });\r\n    //\r\n    //\r\n    //     });\r\n    //     props.setDailyPopularProduct(popularProduct);\r\n    // }\r\n    //\r\n    //\r\n    //\r\n    // popularProductCalc();\r\n\r\n\r\n    let allCardsOfTotal = dailyTotals.map(oneDailyTotal =>{\r\n        return(\r\n            <div className=\"col\">\r\n                <ItemsSold icon={oneDailyTotal.icon} color={oneDailyTotal.color} name={oneDailyTotal.name} unit={oneDailyTotal.unit} value={oneDailyTotal.value} />\r\n            </div>\r\n        )\r\n    })\r\n\r\n\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                <div className=\"col-12 col-md-2 mt-4\">\r\n                    <h3>Choose Date</h3>\r\n                </div>\r\n                <div className=\"col-12 col-md-8 \">\r\n                    <ReactDatePicker changeDailyDetailsInvoices={props.changeDailyDetailsInvoices}\r\n                                     changeDailyStockUp={props.changeDailyStockUp}\r\n                                     changeDailyInvoices={props.changeDailyInvoices}\r\n                                     changeDailyResourcesReports={props.changeDailyResourcesReports}\r\n                                     changeDailyMiscellaneous={props.changeDailyMiscellaneous}\r\n                    />\r\n\r\n\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                {/*<div className=\"col-12 col-md-3\">*/}\r\n                {/*    <DairyVisits/>*/}\r\n                {/*</div>*/}\r\n                {/*<div className=\"col-12 col-md-3\">*/}\r\n                {/*    <ItemsSold otherDailyReports={props.otherDailyReports} />*/}\r\n                {/*</div>*/}\r\n                {/*<div className=\"col-12 col-md-3\">*/}\r\n                {/*    <DairyEarning otherDailyReports={props.otherDailyReports} />*/}\r\n                {/*</div>*/}\r\n                {/*<div className=\"col-12 col-md-3\">*/}\r\n                {/*    <ItemsSold/>*/}\r\n                {/*</div>*/}\r\n                {allCardsOfTotal}\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n\r\n                <div className=\"col\">\r\n                    <ProductSold dailyInvoices={props.dailyInvoices}\r\n                                 addToCart={props.addToCart}\r\n                                 removeToCart={props.removeToCart}\r\n                                 waiters={props.waiters}\r\n                                 cart={props.cart}\r\n                                 setDailyPopularProduct={props.setDailyPopularProduct}\r\n                                 dailyInvoiceDetails={props.dailyInvoiceDetails}\r\n                                 uploadMiscellaneous={props.uploadMiscellaneous}\r\n                                 pushInvoice={props.pushInvoice}\r\n                                 products={props.products}\r\n                                 changeDailyInvoices={props.changeDailyInvoices}/>\r\n\r\n                </div>\r\n                <div className=\"col\">\r\n                    <DailyMiscellaneousComponent dailyMiscellaneous={props.dailyMiscellaneous}/>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n\r\n                <div className=\"col\">\r\n                    <DailyStockUp\r\n                        dailyStockUp={props.dailyStockUp}\r\n                    />\r\n\r\n                </div>\r\n                <div className=\"col\">\r\n                    <DailyResourcesReportsComponent dailyResourcesReports={props.dailyResourcesReports} />\r\n                </div>\r\n            </div>\r\n\r\n            {/*<div className=\"row\">*/}\r\n            {/*    <div className=\"col-12\">*/}\r\n            {/*        <div className=\"container\">*/}\r\n            {/*            <div className=\"row\">*/}\r\n            {/*                <div className=\"col-12\">*/}\r\n            {/*                    <DairyUsage popularProduct={props.otherDailyReports.popularProduct} />*/}\r\n            {/*                </div>*/}\r\n            {/*            </div>*/}\r\n            {/*        </div>*/}\r\n\r\n            {/*    </div>*/}\r\n\r\n            {/*</div>*/}\r\n\r\n\r\n            <div className=\"row\">\r\n                <div className=\"col-12\">\r\n\r\n\r\n                    <DailyInvoicesComponent\r\n                        dailyInvoices={props.dailyInvoices}\r\n                        addToCart={props.addToCart}\r\n                        removeToCart={props.removeToCart}\r\n                        waiters={props.waiters}\r\n                        cart={props.cart}\r\n                        uploadMiscellaneous={props.uploadMiscellaneous}\r\n                        pushInvoice={props.pushInvoice}\r\n                        products={props.products}\r\n                        changeDailyInvoices={props.changeDailyInvoices}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default Dashboard;","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\resources.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Receptions\\UIcomponents\\ToggleButton.js",["521","522"],"import React, {useState} from \"react\";\r\nimport {Collapse, Button, CardBody, Card} from 'reactstrap';\r\nimport '../../../css/home.css';\r\nimport CircleMenu from \"./CicleMenu\";\r\n\r\nlet items = [\r\n    {\r\n        name: 'Add Product',\r\n        icon: 'fa fa-plus',\r\n        color: 'btn-success',\r\n        to: '/management/products'\r\n    },\r\n    {\r\n        name: 'Edit Product',\r\n        icon: 'fa fa-pencil',\r\n        color: 'btn-primary',\r\n        to: '/management/products'\r\n    },\r\n    {\r\n        name: 'Delete Product',\r\n        icon: 'fa fa-trash',\r\n        color: 'btn-danger',\r\n        to: '/management/products'\r\n    },\r\n    {\r\n        name: 'Stock IncreaseProduct',\r\n        icon: 'fa fa-tasks',\r\n        color: 'btn-warning',\r\n        to: '/management/products'\r\n    }\r\n];\r\n\r\nconst ToggleButton = () => {\r\n\r\n    const [collapse, setCollapse] = useState(true);\r\n\r\n    const [status, setStatus] = useState('');\r\n\r\n    const onEntering = () => setStatus('');\r\n\r\n    const onEntered = () => setStatus('');\r\n\r\n    const onExiting = () => setStatus('');\r\n\r\n    const onExited = () => setStatus(' ');\r\n\r\n    const toggle = () => setCollapse(!collapse);\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <Button className=\"color3\" onClick={toggle}\r\n                    style={{marginTop: '1rem', marginLeft: '1rem'}}>Manage</Button>{' '}\r\n\r\n            <h5> {status}</h5>\r\n            <Collapse\r\n                isOpen={collapse}\r\n                onEntering={onEntering}\r\n                onEntered={onEntered}\r\n                onExiting={onExiting}\r\n                onExited={onExited}\r\n            >\r\n                <div className=\"col-12 col-md-11 offset-md-1\">\r\n\r\n                    <CircleMenu items={items}/>\r\n                </div>\r\n\r\n            </Collapse>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default ToggleButton;","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Manager\\Reports\\DairyUsage.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\firebase\\config.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\auth.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\App.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\firebase\\firebase.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\collections\\userCollection.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\behaviors.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\collections\\waiters.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\collections\\invoices.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Manager\\Reports\\ProductSold.js",["523","524","525","526","527","528"],"import {Col, Row, Table,} from \"reactstrap\";\r\nimport {Sticky, StickyContainer} from \"react-sticky\";\r\nimport {useState} from \"react\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\n\r\nlet numberOfItem = 12;\r\nconst ProductSold = (props) => {\r\n    const [productToDisplay, setProductToDisplay] = useState(props.dailyInvoiceDetails.dailyInvoiceDetails);\r\n    const [products, setProducts] = useState(props.dailyInvoiceDetails.products);\r\n    const [hasMoreS, setHasMoreS] = useState(true);\r\n\r\n    let initial_values = (start = 0, lastIndex = numberOfItem, indexing = 0) => {\r\n\r\n        //alert(JSON.stringify(productToDisplay));\r\n        if (productToDisplay === null || productToDisplay === undefined) {\r\n            setHasMoreS(false);\r\n            return [];\r\n        }\r\n        let indexing1;\r\n        let opElement = products.slice(start, lastIndex);\r\n        let menu1New = opElement.map((product, index) => {\r\n\r\n            let receptionist = Object.keys(productToDisplay[product]);\r\n            let details = \"\";\r\n            let totalPrice = 0;\r\n            let totalQuantity = 0;\r\n            receptionist.forEach((rec) => {\r\n                totalPrice += parseInt(productToDisplay[product][rec].totalPrice);\r\n                totalQuantity += parseInt(productToDisplay[product][rec].totalQuantity);\r\n                details += rec + \":\" + productToDisplay[product][rec].totalQuantity + \", \";\r\n\r\n\r\n            });\r\n            return (\r\n\r\n                <tr>\r\n                    <th> {indexing === 0 ? (index + 1) : (++indexing1)}</th>\r\n                    <td>{product}</td>\r\n                    <td>{totalQuantity}</td>\r\n                    <td>{totalPrice}</td>\r\n                    <td>{details}</td>\r\n                </tr>\r\n            )\r\n\r\n\r\n        });\r\n\r\n        if (productToDisplay.length <= (lastIndex + 1)) {\r\n            setHasMoreS(false);\r\n        }\r\n\r\n        const arrNew = [...menu1New];\r\n        return arrNew;\r\n    }\r\n\r\n\r\n    const [activeTab, setActiveTab] = useState('1');\r\n\r\n    const [category, setCategory] = useState('All');\r\n\r\n\r\n    const [itemToFetch, setItemToFetch] = useState(numberOfItem);\r\n    const [itemToStartOn, setItemToStartOn] = useState(numberOfItem);\r\n    const [items2, setItems2] = useState(initial_values());\r\n\r\n    let funMenuNew = (dailyUsange = productToDisplay, reset = false) => {\r\n        if (dailyUsange === null || dailyUsange === undefined) {\r\n            setHasMoreS(false);\r\n            return [];\r\n        }\r\n        let start;\r\n        if (!reset) {\r\n            start = itemToStartOn;\r\n        } else {\r\n            start = 0;\r\n        }\r\n\r\n        let last = start + itemToFetch;\r\n\r\n\r\n        let lastIndex = (dailyUsange.length < last) ? dailyUsange.length : last;\r\n        if (dailyUsange.length >= lastIndex) {\r\n            let indexing = start;\r\n            let menuNew = initial_values(start, lastIndex, indexing);\r\n\r\n            setItemToStartOn(lastIndex);\r\n            if (dailyUsange.length === lastIndex) {\r\n                // this.setState({hasMoreS: false});\r\n                setHasMoreS(false);\r\n            }\r\n            return menuNew;\r\n        } else {\r\n            // this.setState({hasMores:false});\r\n            setHasMoreS(false);\r\n            return [];\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    const toggle = tab => {\r\n        if (activeTab !== tab) setActiveTab(tab);\r\n    }\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    let fetchMoreData = () => {\r\n\r\n        // a fake async api call like which sends\r\n        // 20 more records in 1.5 secs\r\n        setTimeout(() => {\r\n\r\n            let item2 = [...items2, ...funMenuNew()];\r\n\r\n            setItems2(item2);\r\n        }, 1500);\r\n    };\r\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n\r\n            <Row>\r\n\r\n                <Col sm=\"12\">\r\n                    <div className=\"d-flex justify-content-center color3 mt-4\">\r\n                        <h3>Daily sold product </h3>\r\n                    </div>\r\n\r\n                    <Table responsive hover>\r\n\r\n                        <StickyContainer>\r\n\r\n                            <Sticky>\r\n                                {({\r\n                                      style,\r\n\r\n\r\n                                      isSticky,\r\n                                      wasSticky,\r\n                                      distanceFromTop,\r\n                                      distanceFromBottom,\r\n                                      calculatedHeight\r\n                                  }) => (\r\n                                    // <header style={style}>\r\n                                    //     {<FilterMenu categories={keysToUse}\r\n                                    //                  category={category}\r\n                                    //                  changeProductToDisplay={changeProductToDisplay}\r\n                                    //                  setCategory={setCategory}/>\r\n                                    //\r\n                                    //     }\r\n                                    // </header>\r\n\r\n                                    <thead>\r\n                                    <tr>\r\n                                        <th>Id</th>\r\n                                        <th>Product Name</th>\r\n                                        <th>Total Quantity</th>\r\n                                        <th>Total Price</th>\r\n                                        <th>Details</th>\r\n\r\n                                    </tr>\r\n                                    </thead>\r\n\r\n                                )}\r\n\r\n\r\n                            </Sticky>\r\n\r\n                            <div>\r\n\r\n\r\n                                <div id=\"scrollableDivForProductSold\"\r\n                                     className=\"card fixedDiv square scrollbar-cyan bordered-cyan\">\r\n                                    <div className=\"card-body\">\r\n                                        <div className=\"mt-2\">\r\n                                            <InfiniteScroll\r\n                                                scrollableTarget={\"scrollableDivForProductSold\"}\r\n                                                dataLength={items2.length}\r\n                                                next={fetchMoreData}\r\n                                                hasMore={hasMoreS}\r\n                                                loader={<span\r\n                                                    className=\"fa fa-lg fa-spinner text-warning\"><b>loading..</b></span>}\r\n                                                endMessage={\r\n                                                    <p> no more results </p>\r\n                                                }\r\n\r\n                                            >\r\n                                                <div className=\"\">\r\n                                                    <Table>\r\n                                                        <thead>\r\n                                                        <tr>\r\n                                                            <th>Id</th>\r\n                                                            <th>Product Name</th>\r\n                                                            <th>Total Quantity</th>\r\n                                                            <th>Total Price</th>\r\n                                                            <th>Details</th>\r\n\r\n                                                        </tr>\r\n\r\n                                                        </thead>\r\n                                                        <tbody>\r\n                                                        {\r\n\r\n                                                            items2.map(\r\n                                                                (item, i) => {\r\n                                                                    return (\r\n                                                                        item\r\n\r\n                                                                    )\r\n                                                                }\r\n                                                            )\r\n                                                        }\r\n                                                        </tbody>\r\n                                                    </Table>\r\n                                                </div>\r\n                                            </InfiniteScroll>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </StickyContainer>\r\n                    </Table>\r\n\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n\r\n                </Col>\r\n            </Row>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProductSold;\r\n","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\functions\\getSoldProductDate.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\others\\dailyInvoices.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\ActionCreator2.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\functions\\setImage.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Manager\\Reports\\DailyInvoicesComponent.js",["529","530","531","532","533","534","535"],"import {Col, Row, Table} from \"reactstrap\";\r\nimport {Sticky, StickyContainer} from \"react-sticky\";\r\nimport {useState} from \"react\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\n\r\nlet numberOfItem = 12;\r\nconst DailyInvoicesComponent = (props) => {\r\n    let allTr = props.dailyInvoices.dailyInvoices.map((invoice, index) => {\r\n        return (\r\n            <tr>\r\n                <td>{index + 1}</td>\r\n                <td>{invoice.clientName}</td>\r\n                <td>{invoice.id}</td>\r\n            </tr>\r\n        )\r\n    })\r\n\r\n\r\n    let initial_values = () => {\r\n        let opElement1New = props.dailyInvoices.dailyInvoices.slice(0, numberOfItem);\r\n        let menu1New = opElement1New.map((invoice, index) => {\r\n            return (\r\n                <tr key={invoice.id}>\r\n                    <th> {index + 1}</th>\r\n                    <td>{invoice.receptionistName}</td>\r\n                    <td>{invoice.waiterName}</td>\r\n                    <td> {invoice.clientName}</td>\r\n                    <td> {invoice.totalPrice}</td>\r\n                    <td> {invoice.paymentStatus} </td>\r\n                    <td> --</td>\r\n                    <td>--</td>\r\n                </tr>\r\n            )\r\n        });\r\n\r\n\r\n        const arrNew = [...menu1New];\r\n        return arrNew;\r\n    }\r\n\r\n\r\n    const [activeTab, setActiveTab] = useState('1');\r\n    const [productToDisplay, setProductToDisplay] = useState(props.dailyInvoices.dailyInvoices);\r\n    const [category, setCategory] = useState('All');\r\n\r\n\r\n    const [hasMoreS, setHasMoreS] = useState(true);\r\n    const [itemToFetch, setItemToFetch] = useState(numberOfItem);\r\n    const [itemToStartOn, setItemToStartOn] = useState(numberOfItem);\r\n    const [items2, setItems2] = useState(initial_values());\r\n\r\n\r\n    // let keysToUseNew = props.dailyInvoices.dailyInvoices.reduce(\r\n    //     (keysToUse, pr) => {\r\n    //         if (!keysToUse.includes(pr.receptionistName) && !keysToUse.includes(pr.waiterName)) {\r\n    //             keysToUse = [...keysToUse, pr.waiterName, pr.receptionistName];\r\n    //         }\r\n    //\r\n    //         return keysToUse;\r\n    //\r\n    //     }, []\r\n    // );\r\n\r\n\r\n    let funMenuNew = (dailyUsange = props.dailyInvoices.dailyInvoices, reset = false) => {\r\n        let start;\r\n        if (!reset) {\r\n            start = itemToStartOn;\r\n        } else {\r\n            start = 0;\r\n        }\r\n\r\n        let last = start + itemToFetch;\r\n\r\n\r\n        let lastIndex = (dailyUsange.length < last) ? dailyUsange.length : last;\r\n        if (dailyUsange.length >= lastIndex) {\r\n            let indexing = start;\r\n            let opElement = dailyUsange.slice(start, lastIndex);\r\n            // this.setState({\r\n            //     itemToStartOn:lastIndex\r\n            // }\r\n            //\r\n            //\r\n            // )\r\n            setItemToStartOn(lastIndex);\r\n            let menuNew = opElement.map((invoice, index) => {\r\n                return (\r\n                    <tr key={invoice.id}>\r\n\r\n                        <th> {++indexing}</th>\r\n                        <td>{invoice.receptionistName}</td>\r\n                        <td>{invoice.waiterName}</td>\r\n                        <td> {invoice.clientName}</td>\r\n                        <td> {invoice.totalPrice}</td>\r\n                        <td> {invoice.paymentStatus} </td>\r\n                        <td> --</td>\r\n                        <td>--</td>\r\n                    </tr>\r\n                )\r\n            })\r\n            if (dailyUsange.length === lastIndex) {\r\n                // this.setState({hasMoreS: false});\r\n                setHasMoreS(false);\r\n            }\r\n            return menuNew;\r\n        } else {\r\n            // this.setState({hasMores:false});\r\n            setHasMoreS(false);\r\n            return [];\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    const toggle = tab => {\r\n        if (activeTab !== tab) setActiveTab(tab);\r\n    }\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    let fetchMoreData = () => {\r\n\r\n        // a fake async api call like which sends\r\n        // 20 more records in 1.5 secs\r\n        setTimeout(() => {\r\n\r\n            let item2 = [...items2, ...funMenuNew()];\r\n\r\n            setItems2(item2);\r\n        }, 1500);\r\n    };\r\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n\r\n            <Row>\r\n\r\n                <Col sm=\"12\">\r\n                    <div className=\"d-flex justify-content-center bg-warning mt-4\">\r\n                        <h3>Daily Invoices </h3>\r\n                    </div>\r\n                    <Table responsive hover>\r\n\r\n                        <StickyContainer>\r\n\r\n                            <Sticky>\r\n                                {({\r\n                                      style,\r\n\r\n\r\n                                      isSticky,\r\n                                      wasSticky,\r\n                                      distanceFromTop,\r\n                                      distanceFromBottom,\r\n                                      calculatedHeight\r\n                                  }) => (\r\n                                    // <header style={style}>\r\n                                    //     {<FilterMenu categories={keysToUse}\r\n                                    //                  category={category}\r\n                                    //                  changeProductToDisplay={changeProductToDisplay}\r\n                                    //                  setCategory={setCategory}/>\r\n                                    //\r\n                                    //     }\r\n                                    // </header>\r\n\r\n                                    <thead>\r\n                                    <tr>\r\n                                        <th> Id</th>\r\n                                        <th> Receptionist Name</th>\r\n                                        <th> Waiter Name</th>\r\n                                        <th> Client Name</th>\r\n                                        <th> Total Price</th>\r\n                                        <th> Payment Status</th>\r\n                                        <th> Create At</th>\r\n                                        <th>Update At</th>\r\n\r\n                                    </tr>\r\n                                    </thead>\r\n\r\n                                )}\r\n\r\n\r\n                            </Sticky>\r\n\r\n                            <div>\r\n\r\n                                <div id=\"scrollableDivInDailyInvoice\"\r\n                                     className=\"card fixedDiv square scrollbar-cyan bordered-cyan\">\r\n                                    <div className=\"card-body\">\r\n                                        <div className=\"mt-2\">\r\n                                            <InfiniteScroll\r\n                                                scrollableTarget={\"scrollableDivInDailyInvoice\"}\r\n                                                dataLength={items2.length}\r\n                                                next={fetchMoreData}\r\n                                                hasMore={hasMoreS}\r\n                                                loader={<span\r\n                                                    className=\"fa fa-lg fa-spinner text-warning\"><b>Loading</b></span>}\r\n                                                endMessage={\r\n                                                    <p> no more results </p>\r\n                                                }\r\n\r\n                                            >\r\n                                                <div className=\"\">\r\n                                                    <Table>\r\n                                                        <thead>\r\n                                                        <tr>\r\n                                                            <th> Id</th>\r\n                                                            <th> Receptionist Name</th>\r\n                                                            <th> Waiter Name</th>\r\n                                                            <th> Client Name</th>\r\n                                                            <th> Total Price</th>\r\n                                                            <th> Payment Status</th>\r\n                                                            <th> Create At</th>\r\n                                                            <th>Update At</th>\r\n\r\n                                                        </tr>\r\n                                                        </thead>\r\n                                                        <tbody>\r\n                                                        {\r\n\r\n                                                            items2.map(\r\n                                                                (item, i) => {\r\n                                                                    return (\r\n                                                                        item\r\n\r\n                                                                    )\r\n                                                                }\r\n                                                            )\r\n                                                        }\r\n                                                        </tbody>\r\n                                                    </Table>\r\n                                                </div>\r\n                                            </InfiniteScroll>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </StickyContainer>\r\n                    </Table>\r\n\r\n                </Col>\r\n\r\n            </Row>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DailyInvoicesComponent;\r\n","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\others\\dailyInvoiceDetails.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\others\\dailyStockUp.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Manager\\Reports\\DailyStockUp.js",["536","537","538"],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Manager\\Reports\\DailyMiscellaneousComponent.js",["539","540"],"import {Col, Row, Table} from \"reactstrap\";\r\nimport {Sticky, StickyContainer} from \"react-sticky\";\r\nimport {useState} from \"react\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\n\r\nlet numberOfItem = 12;\r\nconst DailyMiscellaneousComponent = (props) => {\r\n    const [productToDisplay] = useState(props.dailyMiscellaneous.dailyMiscellaneous);\r\n\r\n    let initial_values = (start = 0, endIndex = numberOfItem, indexing = 0) => {\r\n        if (productToDisplay === null || productToDisplay === undefined) {\r\n            console.log(\"dailyStockUp is undefined or null\");\r\n            return [];\r\n        }\r\n        let indexing1;\r\n\r\n        let opElement1New = productToDisplay.slice(start, endIndex);\r\n        let menu1New = opElement1New.map((miscellaneous, index) => {\r\n            return (\r\n                <tr key={miscellaneous.id}>\r\n                    <th> {indexing === 0 ? (index + 1) : (++indexing1)}</th>\r\n                    <td>{miscellaneous.by}</td>\r\n                    <td>{miscellaneous.price}</td>\r\n                    <td> {miscellaneous.reason}</td>\r\n                    <td> {miscellaneous.description}</td>\r\n                    <td> proof </td>\r\n                    <td> --</td>\r\n                </tr>\r\n            )\r\n        });\r\n\r\n\r\n        const arrNew = [...menu1New];\r\n        return arrNew;\r\n    }\r\n\r\n\r\n    const [activeTab, setActiveTab] = useState('1');\r\n    const [hasMoreS, setHasMoreS] = useState(true);\r\n    const [itemToFetch, setItemToFetch] = useState(numberOfItem);\r\n    const [itemToStartOn, setItemToStartOn] = useState(numberOfItem);\r\n    const [items2, setItems2] = useState(initial_values());\r\n\r\n    let funMenuNew = (dailyUsange = productToDisplay, reset = false) => {\r\n        let start;\r\n        if (!reset) {\r\n            start = itemToStartOn;\r\n        } else {\r\n            start = 0;\r\n        }\r\n\r\n        let last = start + itemToFetch;\r\n\r\n\r\n        let lastIndex = (dailyUsange.length < last) ? dailyUsange.length : last;\r\n        if (dailyUsange.length >= lastIndex) {\r\n            let indexing = start;\r\n            // this.setState({\r\n            //     itemToStartOn:lastIndex\r\n            // }\r\n            //\r\n            //\r\n            // )\r\n            setItemToStartOn(lastIndex);\r\n            let menuNew = initial_values(start, lastIndex, indexing);\r\n            if (dailyUsange.length === lastIndex) {\r\n                // this.setState({hasMoreS: false});\r\n                setHasMoreS(false);\r\n            }\r\n            return menuNew;\r\n        } else {\r\n            // this.setState({hasMores:false});\r\n            setHasMoreS(false);\r\n            return [];\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    const toggle = tab => {\r\n        if (activeTab !== tab) setActiveTab(tab);\r\n    }\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    let fetchMoreData = () => {\r\n\r\n        // a fake async api call like which sends\r\n        // 20 more records in 1.5 secs\r\n        setTimeout(() => {\r\n\r\n            let item2 = [...items2, ...funMenuNew()];\r\n\r\n            setItems2(item2);\r\n        }, 1500);\r\n    };\r\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n\r\n            <Row>\r\n\r\n                <Col sm=\"12\">\r\n                    <div className=\"d-flex justify-content-center bg-warning mt-4\">\r\n                        <h3>Daily Miscellaneous </h3>\r\n                    </div>\r\n                    <Table responsive hover>\r\n\r\n                        <StickyContainer>\r\n\r\n                            <Sticky>\r\n                                {({\r\n                                      style,\r\n\r\n\r\n                                      isSticky,\r\n                                      wasSticky,\r\n                                      distanceFromTop,\r\n                                      distanceFromBottom,\r\n                                      calculatedHeight\r\n                                  }) => (\r\n                                    // <header style={style}>\r\n                                    //     {<FilterMenu categories={keysToUse}\r\n                                    //                  category={category}\r\n                                    //                  changeProductToDisplay={changeProductToDisplay}\r\n                                    //                  setCategory={setCategory}/>\r\n                                    //\r\n                                    //     }\r\n                                    // </header>\r\n\r\n                                    <thead>\r\n                                    <tr>\r\n                                        <th> Id</th>\r\n                                        <th>by</th>\r\n                                        <th>How much</th>\r\n                                        <th> Reason</th>\r\n                                        <th> Description</th>\r\n                                        <th> Proof </th>\r\n                                        <th>Created At</th>\r\n\r\n                                    </tr>\r\n                                    </thead>\r\n\r\n                                )}\r\n\r\n\r\n                            </Sticky>\r\n\r\n                            <div>\r\n\r\n                                <div id=\"scrollableDivInDailyMiscellaneous\"\r\n                                     className=\"card fixedDiv square scrollbar-cyan bordered-cyan\">\r\n                                    <div className=\"card-body\">\r\n                                        <div className=\"mt-2\">\r\n                                            <InfiniteScroll\r\n                                                scrollableTarget={\"scrollableDivInDailyMiscellaneous\"}\r\n                                                dataLength={items2.length}\r\n                                                next={fetchMoreData}\r\n                                                hasMore={hasMoreS}\r\n                                                loader={<span\r\n                                                    className=\"fa fa-lg fa-spinner text-warning\"><b>Loading</b></span>}\r\n                                                endMessage={\r\n                                                    <p> no more results </p>\r\n                                                }\r\n\r\n                                            >\r\n                                                <div className=\"\">\r\n                                                    <Table>\r\n                                                        <thead>\r\n                                                        <tr>\r\n                                                            <th> Id</th>\r\n                                                            <th>by</th>\r\n                                                            <th>How much</th>\r\n                                                            <th> Reason</th>\r\n                                                            <th> Description</th>\r\n                                                            <th> Proof </th>\r\n                                                            <th>created At</th>\r\n\r\n                                                        </tr>\r\n                                                        </thead>\r\n                                                        <tbody>\r\n                                                        {\r\n\r\n                                                            items2.map(\r\n                                                                (item, i) => {\r\n                                                                    return (\r\n                                                                        item\r\n\r\n                                                                    )\r\n                                                                }\r\n                                                            )\r\n                                                        }\r\n                                                        </tbody>\r\n                                                    </Table>\r\n                                                </div>\r\n                                            </InfiniteScroll>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </StickyContainer>\r\n                    </Table>\r\n\r\n                </Col>\r\n\r\n            </Row>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DailyMiscellaneousComponent;\r\n","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Manager\\Reports\\DailyResourcesReportsComponent.js",["541","542"],"import {Col, Row, Table} from \"reactstrap\";\r\nimport {Sticky, StickyContainer} from \"react-sticky\";\r\nimport {useState} from \"react\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\n\r\nlet numberOfItem = 12;\r\nconst DailyResourcesReportsComponent = (props) => {\r\n    const [productToDisplay] = useState(props.dailyResourcesReports.dailyResourcesReports);\r\n\r\n    let initial_values = (start = 0, endIndex = numberOfItem, indexing = 0) => {\r\n        if (productToDisplay === null || productToDisplay === undefined) {\r\n            console.log(\"dailyStockUp is undefined or null\");\r\n            return [];\r\n        }\r\n        let indexing1;\r\n\r\n        let opElement1New = productToDisplay.slice(start, endIndex);\r\n        let menu1New = opElement1New.map((oneResourceReport, index) => {\r\n            return (\r\n                <tr key={oneResourceReport.id}>\r\n                    <th> {indexing === 0 ? (index + 1) : (++indexing1)}</th>\r\n                    <td>{oneResourceReport.resourceName}</td>\r\n                    <td>{oneResourceReport.quantity}</td>\r\n                    <td>{oneResourceReport.unitPrice}</td>\r\n                    <td> {oneResourceReport.to}</td>\r\n                    <td> -- </td>\r\n                </tr>\r\n            )\r\n        });\r\n\r\n\r\n        const arrNew = [...menu1New];\r\n        return arrNew;\r\n    }\r\n\r\n\r\n    const [activeTab, setActiveTab] = useState('1');\r\n    const [hasMoreS, setHasMoreS] = useState(true);\r\n    const [itemToFetch, setItemToFetch] = useState(numberOfItem);\r\n    const [itemToStartOn, setItemToStartOn] = useState(numberOfItem);\r\n    const [items2, setItems2] = useState(initial_values());\r\n\r\n    let funMenuNew = (dailyUsange = productToDisplay, reset = false) => {\r\n        let start;\r\n        if (!reset) {\r\n            start = itemToStartOn;\r\n        } else {\r\n            start = 0;\r\n        }\r\n\r\n        let last = start + itemToFetch;\r\n\r\n\r\n        let lastIndex = (dailyUsange.length < last) ? dailyUsange.length : last;\r\n        if (dailyUsange.length >= lastIndex) {\r\n            let indexing = start;\r\n            // this.setState({\r\n            //     itemToStartOn:lastIndex\r\n            // }\r\n            //\r\n            //\r\n            // )\r\n            setItemToStartOn(lastIndex);\r\n            let menuNew = initial_values(start, lastIndex, indexing);\r\n            if (dailyUsange.length === lastIndex) {\r\n                // this.setState({hasMoreS: false});\r\n                setHasMoreS(false);\r\n            }\r\n            return menuNew;\r\n        } else {\r\n            // this.setState({hasMores:false});\r\n            setHasMoreS(false);\r\n            return [];\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    const toggle = tab => {\r\n        if (activeTab !== tab) setActiveTab(tab);\r\n    }\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    let fetchMoreData = () => {\r\n\r\n        // a fake async api call like which sends\r\n        // 20 more records in 1.5 secs\r\n        setTimeout(() => {\r\n\r\n            let item2 = [...items2, ...funMenuNew()];\r\n\r\n            setItems2(item2);\r\n        }, 1500);\r\n    };\r\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n\r\n            <Row>\r\n\r\n                <Col sm=\"12\">\r\n                    <div className=\"d-flex justify-content-center bg-warning mt-4\">\r\n                        <h3>Daily Resources Stock OUt </h3>\r\n                    </div>\r\n                    <Table responsive hover>\r\n\r\n                        <StickyContainer>\r\n\r\n                            <Sticky>\r\n                                {({\r\n                                      style,\r\n\r\n\r\n                                      isSticky,\r\n                                      wasSticky,\r\n                                      distanceFromTop,\r\n                                      distanceFromBottom,\r\n                                      calculatedHeight\r\n                                  }) => (\r\n                                    // <header style={style}>\r\n                                    //     {<FilterMenu categories={keysToUse}\r\n                                    //                  category={category}\r\n                                    //                  changeProductToDisplay={changeProductToDisplay}\r\n                                    //                  setCategory={setCategory}/>\r\n                                    //\r\n                                    //     }\r\n                                    // </header>\r\n\r\n                                    <thead>\r\n                                    <tr>\r\n                                        <th> Id</th>\r\n                                        <th>Resource Name</th>\r\n                                        <th>Quantity</th>\r\n                                        <th>Unit Price</th>\r\n                                        <th> goes to</th>\r\n                                        <th> created At </th>\r\n\r\n                                    </tr>\r\n                                    </thead>\r\n\r\n                                )}\r\n\r\n\r\n                            </Sticky>\r\n\r\n                            <div>\r\n\r\n                                <div id=\"scrollableDivInDailyResourcesReports\"\r\n                                     className=\"card fixedDiv square scrollbar-cyan bordered-cyan\">\r\n                                    <div className=\"card-body\">\r\n                                        <div className=\"mt-2\">\r\n                                            <InfiniteScroll\r\n                                                scrollableTarget={\"scrollableDivInDailyResourcesReports\"}\r\n                                                dataLength={items2.length}\r\n                                                next={fetchMoreData}\r\n                                                hasMore={hasMoreS}\r\n                                                loader={<span\r\n                                                    className=\"fa fa-lg fa-spinner text-warning\"><b>Loading</b></span>}\r\n                                                endMessage={\r\n                                                    <p> no more results </p>\r\n                                                }\r\n\r\n                                            >\r\n                                                <div className=\"\">\r\n                                                    <Table>\r\n                                                        <thead>\r\n                                                        <tr>\r\n                                                            <th> Id</th>\r\n                                                            <th>Resource Name</th>\r\n                                                            <th>Quantity</th>\r\n                                                            <th>Unit Price</th>\r\n                                                            <th> goes to</th>\r\n                                                            <th> created At </th>\r\n\r\n                                                        </tr>\r\n                                                        </thead>\r\n                                                        <tbody>\r\n                                                        {\r\n\r\n                                                            items2.map(\r\n                                                                (item, i) => {\r\n                                                                    return (\r\n                                                                        item\r\n\r\n                                                                    )\r\n                                                                }\r\n                                                            )\r\n                                                        }\r\n                                                        </tbody>\r\n                                                    </Table>\r\n                                                </div>\r\n                                            </InfiniteScroll>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </StickyContainer>\r\n                    </Table>\r\n\r\n                </Col>\r\n\r\n            </Row>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DailyResourcesReportsComponent;\r\n","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\functions\\makeInvoicePaid.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Receptions\\UIcomponents\\NonPaidInvoicesComponent.js",["543","544","545"],"import {Button, Col, Container, Row, Table} from \"reactstrap\";\r\nimport {Sticky, StickyContainer} from \"react-sticky\";\r\nimport {useState} from \"react\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport makeInvoicePaid from \"../../../functions/makeInvoicePaid\";\r\n\r\nlet numberOfItem = 12;\r\nconst NonPaidInvoicesComponent = (props) => {\r\n\r\n\r\n    const [productToDisplay, setProductToDisplay] = useState(props.nonPaidInvoices.nonPaidInvoices);\r\n\r\n    let handleMakePaidClick = event =>{\r\n        alert(event.target.id)\r\n        makeInvoicePaid(event.target.id, props.changeNonPaidInvoices);\r\n\r\n    }\r\n    let handleRefresh = (event) =>{\r\n        let receptionistName = JSON.parse(localStorage.getItem('userCollection')).firstName;\r\n        props.changeNonPaidInvoices(receptionistName);\r\n    }\r\n\r\n\r\n\r\n    const [hasMoreS, setHasMoreS] = useState(true);\r\n\r\n    let initial_values = (start = 0, endIndex = numberOfItem, indexing = 0) => {\r\n        if (productToDisplay === null || productToDisplay === undefined) {\r\n            console.log(\" is undefined or null\");\r\n            return [];\r\n        }\r\n        let indexing1;\r\n\r\n        let opElement1New = productToDisplay.slice(start, endIndex);\r\n        let menu1New = opElement1New.map((oneInvoice, index) => {\r\n            return (\r\n                <tr key={oneInvoice.id}>\r\n                    <th> {indexing === 0 ? (index + 1) : (++indexing1)}</th>\r\n                    <td>{oneInvoice.waiterName}</td>\r\n                    <td>{oneInvoice.totalPrice}</td>\r\n                    <td>{oneInvoice.clientName}</td>\r\n                    <td> {oneInvoice.paymentStatus}</td>\r\n                    <td> --</td>\r\n                    <td> <Button id={oneInvoice.id} onClick={handleMakePaidClick} className='bg-warning'>Make Paid</Button> </td>\r\n                </tr>\r\n            )\r\n        });\r\n\r\n\r\n        const arrNew = [...menu1New];\r\n        return arrNew;\r\n    }\r\n\r\n\r\n    const [activeTab, setActiveTab] = useState('1');\r\n    const [itemToFetch, setItemToFetch] = useState(numberOfItem);\r\n    const [itemToStartOn, setItemToStartOn] = useState(numberOfItem);\r\n    const [items2, setItems2] = useState(initial_values());\r\n\r\n    let funMenuNew = (dailyUsange = productToDisplay, reset = false) => {\r\n        let start;\r\n        if (!reset) {\r\n            start = itemToStartOn;\r\n        } else {\r\n            start = 0;\r\n        }\r\n\r\n        let last = start + itemToFetch;\r\n\r\n\r\n        let lastIndex = (dailyUsange.length < last) ? dailyUsange.length : last;\r\n        if (dailyUsange.length >= lastIndex) {\r\n            let indexing = start;\r\n            // this.setState({\r\n            //     itemToStartOn:lastIndex\r\n            // }\r\n            //\r\n            //\r\n            // )\r\n            setItemToStartOn(lastIndex);\r\n            let menuNew = initial_values(start, lastIndex, indexing);\r\n            if (dailyUsange.length === lastIndex) {\r\n                // this.setState({hasMoreS: false});\r\n                setHasMoreS(false);\r\n            }\r\n            return menuNew;\r\n        } else {\r\n            // this.setState({hasMores:false});\r\n            setHasMoreS(false);\r\n            return [];\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    const toggle = tab => {\r\n        if (activeTab !== tab) setActiveTab(tab);\r\n    }\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    let fetchMoreData = () => {\r\n\r\n        // a fake async api call like which sends\r\n        // 20 more records in 1.5 secs\r\n        setTimeout(() => {\r\n\r\n            let item2 = [...items2, ...funMenuNew()];\r\n\r\n            setItems2(item2);\r\n        }, 1500);\r\n    };\r\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n    return (\r\n        <Container >\r\n            <Row> <Col md={{size: 4, offset: 8}}>\r\n                <Button onClick={handleRefresh}> <span className=\"fa fa-spinner\" >Click to refresh</span> </Button>\r\n            </Col> </Row>\r\n            <Row>\r\n\r\n                <Col sm=\"12\">\r\n                    <div className=\"d-flex justify-content-center bg-warning mt-4\">\r\n                        <h3>non paid Invoice </h3>\r\n                    </div>\r\n                    <Table responsive hover>\r\n\r\n                        <StickyContainer>\r\n\r\n                            <Sticky>\r\n                                {({\r\n                                      style,\r\n\r\n\r\n                                      isSticky,\r\n                                      wasSticky,\r\n                                      distanceFromTop,\r\n                                      distanceFromBottom,\r\n                                      calculatedHeight\r\n                                  }) => (\r\n                                    // <header style={style}>\r\n                                    //     {<FilterMenu categories={keysToUse}\r\n                                    //                  category={category}\r\n                                    //                  changeProductToDisplay={changeProductToDisplay}\r\n                                    //                  setCategory={setCategory}/>\r\n                                    //\r\n                                    //     }\r\n                                    // </header>\r\n\r\n                                    <thead>\r\n                                    <tr>\r\n                                        <th> Id</th>\r\n                                        <th>WaiterName</th>\r\n                                        <th>TotalPrice</th>\r\n                                        <th>ClientName</th>\r\n                                        <th> PaymentStatus</th>\r\n                                        <th> created At</th>\r\n\r\n                                    </tr>\r\n                                    </thead>\r\n\r\n                                )}\r\n\r\n\r\n                            </Sticky>\r\n\r\n                            <div>\r\n\r\n                                <div id=\"scrollableDivInReports\"\r\n                                     className=\"card fixedDiv square scrollbar-cyan bordered-cyan\">\r\n                                    <div className=\"card-body\">\r\n                                        <div className=\"mt-2\">\r\n                                            <InfiniteScroll\r\n                                                scrollableTarget={\"scrollableDivInReports\"}\r\n                                                dataLength={items2.length}\r\n                                                next={fetchMoreData}\r\n                                                hasMore={hasMoreS}\r\n                                                loader={<span\r\n                                                    className=\"fa fa-lg fa-spinner text-warning\"><b>Loading</b></span>}\r\n                                                endMessage={\r\n                                                    <p> no more results </p>\r\n                                                }\r\n\r\n                                            >\r\n                                                <div className=\"\">\r\n                                                    <Table>\r\n                                                        <thead>\r\n                                                        <tr>\r\n                                                            <th> Id</th>\r\n                                                            <th>WaiterName</th>\r\n                                                            <th>TotalPrice</th>\r\n                                                            <th>ClientName</th>\r\n                                                            <th> PaymentStatus</th>\r\n                                                            <th> created At</th>\r\n\r\n                                                        </tr>\r\n                                                        </thead>\r\n                                                        <tbody>\r\n                                                        {\r\n\r\n                                                            items2.map(\r\n                                                                (item, i) => {\r\n                                                                    return (\r\n                                                                        item\r\n\r\n                                                                    )\r\n                                                                }\r\n                                                            )\r\n                                                        }\r\n                                                        </tbody>\r\n                                                    </Table>\r\n                                                </div>\r\n                                            </InfiniteScroll>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </StickyContainer>\r\n                    </Table>\r\n\r\n                </Col>\r\n\r\n            </Row>\r\n\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default NonPaidInvoicesComponent;\r\n","C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\others\\dailyMiscellaneous.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\components\\Manager\\UIcomponents\\DairyEarning.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\others\\otherDailyReports.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\collections\\miscellaneous.js",[],"C:\\Users\\paterne\\Desktop\\oop\\projects\\React\\resto_v1.0\\resto\\src\\redux\\others\\dailyResourcesReports.js",[],{"ruleId":"546","replacedBy":"547"},{"ruleId":"548","replacedBy":"549"},{"ruleId":"546","replacedBy":"550"},{"ruleId":"548","replacedBy":"551"},{"ruleId":"546","replacedBy":"552"},{"ruleId":"548","replacedBy":"553"},{"ruleId":"554","severity":1,"message":"555","line":36,"column":25,"nodeType":"556","endLine":36,"endColumn":61},{"ruleId":"546","replacedBy":"557"},{"ruleId":"548","replacedBy":"558"},{"ruleId":"559","severity":1,"message":"560","line":83,"column":37,"nodeType":"556","endLine":89,"endColumn":39},{"ruleId":"559","severity":1,"message":"560","line":105,"column":37,"nodeType":"556","endLine":111,"endColumn":39},{"ruleId":"559","severity":1,"message":"560","line":128,"column":37,"nodeType":"556","endLine":136,"endColumn":39},{"ruleId":"559","severity":1,"message":"560","line":154,"column":37,"nodeType":"556","endLine":159,"endColumn":39},{"ruleId":"559","severity":1,"message":"561","line":175,"column":41,"nodeType":"556","endLine":176,"endColumn":89},{"ruleId":"559","severity":1,"message":"562","line":182,"column":37,"nodeType":"556","endLine":183,"endColumn":78},{"ruleId":"559","severity":1,"message":"563","line":192,"column":37,"nodeType":"556","endLine":193,"endColumn":91},{"ruleId":"564","severity":1,"message":"565","line":9,"column":7,"nodeType":"566","messageId":"567","endLine":9,"endColumn":15},{"ruleId":"559","severity":1,"message":"560","line":44,"column":41,"nodeType":"556","endLine":49,"endColumn":43},{"ruleId":"559","severity":1,"message":"568","line":65,"column":41,"nodeType":"556","endLine":73,"endColumn":43},{"ruleId":"559","severity":1,"message":"561","line":89,"column":45,"nodeType":"556","endLine":90,"endColumn":93},{"ruleId":"564","severity":1,"message":"569","line":2,"column":9,"nodeType":"566","messageId":"567","endLine":2,"endColumn":12},{"ruleId":"564","severity":1,"message":"570","line":2,"column":14,"nodeType":"566","messageId":"567","endLine":2,"endColumn":17},{"ruleId":"564","severity":1,"message":"571","line":2,"column":19,"nodeType":"566","messageId":"567","endLine":2,"endColumn":26},{"ruleId":"564","severity":1,"message":"572","line":2,"column":28,"nodeType":"566","messageId":"567","endLine":2,"endColumn":35},{"ruleId":"564","severity":1,"message":"573","line":2,"column":37,"nodeType":"566","messageId":"567","endLine":2,"endColumn":40},{"ruleId":"564","severity":1,"message":"574","line":2,"column":42,"nodeType":"566","messageId":"567","endLine":2,"endColumn":52},{"ruleId":"564","severity":1,"message":"575","line":2,"column":54,"nodeType":"566","messageId":"567","endLine":2,"endColumn":61},{"ruleId":"564","severity":1,"message":"576","line":3,"column":8,"nodeType":"566","messageId":"567","endLine":3,"endColumn":18},{"ruleId":"564","severity":1,"message":"577","line":14,"column":12,"nodeType":"566","messageId":"567","endLine":14,"endColumn":23},{"ruleId":"564","severity":1,"message":"578","line":16,"column":11,"nodeType":"566","messageId":"567","endLine":16,"endColumn":17},{"ruleId":"564","severity":1,"message":"579","line":36,"column":11,"nodeType":"566","messageId":"567","endLine":36,"endColumn":15},{"ruleId":"564","severity":1,"message":"580","line":9,"column":5,"nodeType":"566","messageId":"567","endLine":9,"endColumn":17},{"ruleId":"564","severity":1,"message":"581","line":10,"column":5,"nodeType":"566","messageId":"567","endLine":10,"endColumn":17},{"ruleId":"564","severity":1,"message":"582","line":11,"column":5,"nodeType":"566","messageId":"567","endLine":11,"endColumn":19},{"ruleId":"564","severity":1,"message":"583","line":24,"column":5,"nodeType":"566","messageId":"567","endLine":24,"endColumn":25},{"ruleId":"564","severity":1,"message":"584","line":5,"column":9,"nodeType":"566","messageId":"567","endLine":5,"endColumn":16},{"ruleId":"564","severity":1,"message":"585","line":7,"column":10,"nodeType":"566","messageId":"567","endLine":7,"endColumn":22},{"ruleId":"559","severity":1,"message":"562","line":64,"column":37,"nodeType":"556","endLine":65,"endColumn":78},{"ruleId":"559","severity":1,"message":"560","line":80,"column":37,"nodeType":"556","endLine":85,"endColumn":39},{"ruleId":"559","severity":1,"message":"563","line":103,"column":37,"nodeType":"556","endLine":104,"endColumn":90},{"ruleId":"546","replacedBy":"586"},{"ruleId":"548","replacedBy":"587"},{"ruleId":"546","replacedBy":"588"},{"ruleId":"548","replacedBy":"589"},{"ruleId":"546","replacedBy":"590"},{"ruleId":"548","replacedBy":"591"},{"ruleId":"564","severity":1,"message":"592","line":19,"column":19,"nodeType":"566","messageId":"567","endLine":19,"endColumn":27},{"ruleId":"564","severity":1,"message":"593","line":2,"column":9,"nodeType":"566","messageId":"567","endLine":2,"endColumn":15},{"ruleId":"564","severity":1,"message":"592","line":13,"column":19,"nodeType":"566","messageId":"567","endLine":13,"endColumn":27},{"ruleId":"564","severity":1,"message":"594","line":67,"column":20,"nodeType":"566","messageId":"567","endLine":67,"endColumn":29},{"ruleId":"564","severity":1,"message":"595","line":70,"column":22,"nodeType":"566","messageId":"567","endLine":70,"endColumn":33},{"ruleId":"596","severity":1,"message":"597","line":219,"column":13,"nodeType":"556","endLine":219,"endColumn":70},{"ruleId":"564","severity":1,"message":"598","line":11,"column":9,"nodeType":"566","messageId":"567","endLine":11,"endColumn":14},{"ruleId":"564","severity":1,"message":"599","line":13,"column":9,"nodeType":"566","messageId":"567","endLine":13,"endColumn":16},{"ruleId":"554","severity":1,"message":"600","line":49,"column":106,"nodeType":"556","endLine":50,"endColumn":44},{"ruleId":"546","replacedBy":"601"},{"ruleId":"548","replacedBy":"602"},{"ruleId":"603","severity":1,"message":"604","line":6,"column":5,"nodeType":"605","messageId":"606","endLine":18,"endColumn":6},{"ruleId":"564","severity":1,"message":"573","line":1,"column":95,"nodeType":"566","messageId":"567","endLine":1,"endColumn":98},{"ruleId":"564","severity":1,"message":"569","line":1,"column":100,"nodeType":"566","messageId":"567","endLine":1,"endColumn":103},{"ruleId":"546","replacedBy":"607"},{"ruleId":"548","replacedBy":"608"},{"ruleId":"559","severity":1,"message":"560","line":102,"column":33,"nodeType":"556","endLine":108,"endColumn":35},{"ruleId":"559","severity":1,"message":"560","line":124,"column":33,"nodeType":"556","endLine":130,"endColumn":35},{"ruleId":"559","severity":1,"message":"560","line":147,"column":33,"nodeType":"556","endLine":153,"endColumn":35},{"ruleId":"559","severity":1,"message":"560","line":170,"column":33,"nodeType":"556","endLine":179,"endColumn":35},{"ruleId":"559","severity":1,"message":"609","line":197,"column":33,"nodeType":"556","endLine":204,"endColumn":35},{"ruleId":"559","severity":1,"message":"560","line":237,"column":33,"nodeType":"556","endLine":243,"endColumn":35},{"ruleId":"559","severity":1,"message":"560","line":259,"column":33,"nodeType":"556","endLine":265,"endColumn":35},{"ruleId":"559","severity":1,"message":"560","line":282,"column":33,"nodeType":"556","endLine":288,"endColumn":35},{"ruleId":"559","severity":1,"message":"560","line":305,"column":33,"nodeType":"556","endLine":311,"endColumn":35},{"ruleId":"559","severity":1,"message":"560","line":328,"column":33,"nodeType":"556","endLine":337,"endColumn":35},{"ruleId":"559","severity":1,"message":"560","line":355,"column":33,"nodeType":"556","endLine":364,"endColumn":35},{"ruleId":"559","severity":1,"message":"609","line":382,"column":33,"nodeType":"556","endLine":388,"endColumn":35},{"ruleId":"559","severity":1,"message":"560","line":424,"column":33,"nodeType":"556","endLine":430,"endColumn":35},{"ruleId":"559","severity":1,"message":"560","line":446,"column":33,"nodeType":"556","endLine":452,"endColumn":35},{"ruleId":"559","severity":1,"message":"560","line":469,"column":33,"nodeType":"556","endLine":475,"endColumn":35},{"ruleId":"559","severity":1,"message":"560","line":492,"column":33,"nodeType":"556","endLine":501,"endColumn":35},{"ruleId":"559","severity":1,"message":"609","line":519,"column":33,"nodeType":"556","endLine":525,"endColumn":35},{"ruleId":"559","severity":1,"message":"560","line":45,"column":41,"nodeType":"556","endLine":51,"endColumn":43},{"ruleId":"559","severity":1,"message":"560","line":67,"column":41,"nodeType":"556","endLine":73,"endColumn":43},{"ruleId":"559","severity":1,"message":"560","line":89,"column":41,"nodeType":"556","endLine":98,"endColumn":43},{"ruleId":"559","severity":1,"message":"560","line":117,"column":41,"nodeType":"556","endLine":122,"endColumn":43},{"ruleId":"559","severity":1,"message":"568","line":138,"column":41,"nodeType":"556","endLine":146,"endColumn":43},{"ruleId":"559","severity":1,"message":"568","line":162,"column":41,"nodeType":"556","endLine":170,"endColumn":43},{"ruleId":"559","severity":1,"message":"561","line":186,"column":45,"nodeType":"556","endLine":187,"endColumn":93},{"ruleId":"546","replacedBy":"610"},{"ruleId":"548","replacedBy":"611"},{"ruleId":"564","severity":1,"message":"593","line":3,"column":5,"nodeType":"566","messageId":"567","endLine":3,"endColumn":11},{"ruleId":"564","severity":1,"message":"612","line":6,"column":5,"nodeType":"566","messageId":"567","endLine":6,"endColumn":13},{"ruleId":"613","severity":1,"message":"614","line":134,"column":37,"nodeType":"615","messageId":"616","endLine":134,"endColumn":39},{"ruleId":"564","severity":1,"message":"617","line":2,"column":8,"nodeType":"566","messageId":"567","endLine":2,"endColumn":16},{"ruleId":"546","replacedBy":"618"},{"ruleId":"548","replacedBy":"619"},{"ruleId":"564","severity":1,"message":"620","line":20,"column":12,"nodeType":"566","messageId":"567","endLine":20,"endColumn":15},{"ruleId":"546","replacedBy":"621"},{"ruleId":"548","replacedBy":"622"},{"ruleId":"564","severity":1,"message":"623","line":2,"column":53,"nodeType":"566","messageId":"567","endLine":2,"endColumn":57},{"ruleId":"564","severity":1,"message":"593","line":2,"column":59,"nodeType":"566","messageId":"567","endLine":2,"endColumn":65},{"ruleId":"564","severity":1,"message":"624","line":2,"column":67,"nodeType":"566","messageId":"567","endLine":2,"endColumn":76},{"ruleId":"564","severity":1,"message":"612","line":2,"column":78,"nodeType":"566","messageId":"567","endLine":2,"endColumn":86},{"ruleId":"564","severity":1,"message":"569","line":2,"column":93,"nodeType":"566","messageId":"567","endLine":2,"endColumn":96},{"ruleId":"564","severity":1,"message":"598","line":4,"column":9,"nodeType":"566","messageId":"567","endLine":4,"endColumn":14},{"ruleId":"564","severity":1,"message":"625","line":5,"column":8,"nodeType":"566","messageId":"567","endLine":5,"endColumn":20},{"ruleId":"564","severity":1,"message":"626","line":7,"column":8,"nodeType":"566","messageId":"567","endLine":7,"endColumn":19},{"ruleId":"546","replacedBy":"627"},{"ruleId":"548","replacedBy":"628"},{"ruleId":"564","severity":1,"message":"629","line":5,"column":22,"nodeType":"566","messageId":"567","endLine":5,"endColumn":33},{"ruleId":"564","severity":1,"message":"630","line":2,"column":8,"nodeType":"566","messageId":"567","endLine":2,"endColumn":18},{"ruleId":"564","severity":1,"message":"631","line":2,"column":27,"nodeType":"566","messageId":"567","endLine":2,"endColumn":35},{"ruleId":"564","severity":1,"message":"623","line":2,"column":37,"nodeType":"566","messageId":"567","endLine":2,"endColumn":41},{"ruleId":"564","severity":1,"message":"632","line":8,"column":30,"nodeType":"566","messageId":"567","endLine":8,"endColumn":49},{"ruleId":"564","severity":1,"message":"633","line":9,"column":22,"nodeType":"566","messageId":"567","endLine":9,"endColumn":33},{"ruleId":"564","severity":1,"message":"634","line":59,"column":12,"nodeType":"566","messageId":"567","endLine":59,"endColumn":20},{"ruleId":"564","severity":1,"message":"629","line":59,"column":22,"nodeType":"566","messageId":"567","endLine":59,"endColumn":33},{"ruleId":"564","severity":1,"message":"635","line":62,"column":25,"nodeType":"566","messageId":"567","endLine":62,"endColumn":39},{"ruleId":"564","severity":1,"message":"578","line":102,"column":11,"nodeType":"566","messageId":"567","endLine":102,"endColumn":17},{"ruleId":"564","severity":1,"message":"636","line":8,"column":9,"nodeType":"566","messageId":"567","endLine":8,"endColumn":14},{"ruleId":"564","severity":1,"message":"637","line":43,"column":12,"nodeType":"566","messageId":"567","endLine":43,"endColumn":28},{"ruleId":"564","severity":1,"message":"632","line":43,"column":30,"nodeType":"566","messageId":"567","endLine":43,"endColumn":49},{"ruleId":"564","severity":1,"message":"634","line":44,"column":12,"nodeType":"566","messageId":"567","endLine":44,"endColumn":20},{"ruleId":"564","severity":1,"message":"629","line":44,"column":22,"nodeType":"566","messageId":"567","endLine":44,"endColumn":33},{"ruleId":"564","severity":1,"message":"635","line":48,"column":25,"nodeType":"566","messageId":"567","endLine":48,"endColumn":39},{"ruleId":"564","severity":1,"message":"578","line":117,"column":11,"nodeType":"566","messageId":"567","endLine":117,"endColumn":17},{"ruleId":"564","severity":1,"message":"632","line":8,"column":30,"nodeType":"566","messageId":"567","endLine":8,"endColumn":49},{"ruleId":"564","severity":1,"message":"635","line":42,"column":25,"nodeType":"566","messageId":"567","endLine":42,"endColumn":39},{"ruleId":"564","severity":1,"message":"578","line":83,"column":11,"nodeType":"566","messageId":"567","endLine":83,"endColumn":17},{"ruleId":"564","severity":1,"message":"635","line":40,"column":25,"nodeType":"566","messageId":"567","endLine":40,"endColumn":39},{"ruleId":"564","severity":1,"message":"578","line":81,"column":11,"nodeType":"566","messageId":"567","endLine":81,"endColumn":17},{"ruleId":"564","severity":1,"message":"635","line":39,"column":25,"nodeType":"566","messageId":"567","endLine":39,"endColumn":39},{"ruleId":"564","severity":1,"message":"578","line":80,"column":11,"nodeType":"566","messageId":"567","endLine":80,"endColumn":17},{"ruleId":"564","severity":1,"message":"632","line":11,"column":30,"nodeType":"566","messageId":"567","endLine":11,"endColumn":49},{"ruleId":"564","severity":1,"message":"635","line":56,"column":25,"nodeType":"566","messageId":"567","endLine":56,"endColumn":39},{"ruleId":"564","severity":1,"message":"578","line":97,"column":11,"nodeType":"566","messageId":"567","endLine":97,"endColumn":17},"no-native-reassign",["638"],"no-negated-in-lhs",["639"],["638"],["639"],["638"],["639"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["638"],["639"],"react/jsx-pascal-case","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component checkbox must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","no-unused-vars","'isNumber' is assigned a value but never used.","Identifier","unusedVar","Imported JSX component password must be in PascalCase or SCREAMING_SNAKE_CASE","'Col' is defined but never used.","'Nav' is defined but never used.","'NavItem' is defined but never used.","'NavLink' is defined but never used.","'Row' is defined but never used.","'TabContent' is defined but never used.","'TabPane' is defined but never used.","'classnames' is defined but never used.","'cathegories' is assigned a value but never used.","'toggle' is assigned a value but never used.","'menu' is assigned a value but never used.","'DropdownItem' is defined but never used.","'DropdownMenu' is defined but never used.","'DropdownToggle' is defined but never used.","'UncontrolledDropdown' is defined but never used.","'Loading' is defined but never used.","'RenderLeader' is defined but never used.",["638"],["639"],["638"],["639"],["638"],["639"],"'setItems' is assigned a value but never used.","'Button' is defined but never used.","'setErrorM' is assigned a value but never used.","'setDisabled' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'ITEMS' is defined but never used.","'baseUrl' is defined but never used.","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md",["638"],["639"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor",["638"],["639"],"Imported JSX component file must be in PascalCase or SCREAMING_SNAKE_CASE",["638"],["639"],"'CardText' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'ReactDOM' is defined but never used.",["638"],["639"],"'map' is assigned a value but never used.",["638"],["639"],"'Card' is defined but never used.","'CardTitle' is defined but never used.","'FlippingCard' is defined but never used.","'RenderCard3' is defined but never used.",["638"],["639"],"'setCategory' is assigned a value but never used.","'DairyUsage' is defined but never used.","'CardBody' is defined but never used.","'setProductToDisplay' is assigned a value but never used.","'setProducts' is assigned a value but never used.","'category' is assigned a value but never used.","'setItemToFetch' is assigned a value but never used.","'allTr' is assigned a value but never used.","'productToDisplay' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]